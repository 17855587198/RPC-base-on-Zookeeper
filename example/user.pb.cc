// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_user_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheItem_user_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_user_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_user_2eproto;
namespace Kuser {
class ResultCodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResultCode> _instance;
} _ResultCode_default_instance_;
class LoginRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginRequest> _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoginResponse> _instance;
} _LoginResponse_default_instance_;
class RegisterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterRequest> _instance;
} _RegisterRequest_default_instance_;
class RegisterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterResponse> _instance;
} _RegisterResponse_default_instance_;
class SumToNRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SumToNRequest> _instance;
} _SumToNRequest_default_instance_;
class SumToNResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SumToNResponse> _instance;
} _SumToNResponse_default_instance_;
class GetUserProfileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserProfileRequest> _instance;
} _GetUserProfileRequest_default_instance_;
class GetUserProfileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserProfileResponse> _instance;
} _GetUserProfileResponse_default_instance_;
class CacheSetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheSetRequest> _instance;
} _CacheSetRequest_default_instance_;
class CacheGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheGetRequest> _instance;
} _CacheGetRequest_default_instance_;
class CacheGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheGetResponse> _instance;
} _CacheGetResponse_default_instance_;
class CacheDeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheDeleteRequest> _instance;
} _CacheDeleteRequest_default_instance_;
class CacheBatchGetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheBatchGetRequest> _instance;
} _CacheBatchGetRequest_default_instance_;
class CacheItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheItem> _instance;
} _CacheItem_default_instance_;
class CacheBatchGetResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheBatchGetResponse> _instance;
} _CacheBatchGetResponse_default_instance_;
class CacheExistsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheExistsRequest> _instance;
} _CacheExistsRequest_default_instance_;
class CacheExistsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheExistsResponse> _instance;
} _CacheExistsResponse_default_instance_;
class CacheStatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheStatsRequest> _instance;
} _CacheStatsRequest_default_instance_;
class CacheStatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CacheStatsResponse> _instance;
} _CacheStatsResponse_default_instance_;
}  // namespace Kuser
static void InitDefaultsscc_info_CacheBatchGetRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheBatchGetRequest_default_instance_;
    new (ptr) ::Kuser::CacheBatchGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheBatchGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheBatchGetRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheBatchGetRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_CacheBatchGetResponse_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheBatchGetResponse_default_instance_;
    new (ptr) ::Kuser::CacheBatchGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheBatchGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CacheBatchGetResponse_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CacheBatchGetResponse_user_2eproto}, {
      &scc_info_ResultCode_user_2eproto.base,
      &scc_info_CacheItem_user_2eproto.base,}};

static void InitDefaultsscc_info_CacheDeleteRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheDeleteRequest_default_instance_;
    new (ptr) ::Kuser::CacheDeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheDeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheDeleteRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheDeleteRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_CacheExistsRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheExistsRequest_default_instance_;
    new (ptr) ::Kuser::CacheExistsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheExistsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheExistsRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheExistsRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_CacheExistsResponse_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheExistsResponse_default_instance_;
    new (ptr) ::Kuser::CacheExistsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheExistsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CacheExistsResponse_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CacheExistsResponse_user_2eproto}, {
      &scc_info_ResultCode_user_2eproto.base,}};

static void InitDefaultsscc_info_CacheGetRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheGetRequest_default_instance_;
    new (ptr) ::Kuser::CacheGetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheGetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheGetRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheGetRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_CacheGetResponse_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheGetResponse_default_instance_;
    new (ptr) ::Kuser::CacheGetResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheGetResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CacheGetResponse_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CacheGetResponse_user_2eproto}, {
      &scc_info_ResultCode_user_2eproto.base,}};

static void InitDefaultsscc_info_CacheItem_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheItem_default_instance_;
    new (ptr) ::Kuser::CacheItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheItem_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheItem_user_2eproto}, {}};

static void InitDefaultsscc_info_CacheSetRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheSetRequest_default_instance_;
    new (ptr) ::Kuser::CacheSetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheSetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheSetRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheSetRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_CacheStatsRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheStatsRequest_default_instance_;
    new (ptr) ::Kuser::CacheStatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheStatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CacheStatsRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CacheStatsRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_CacheStatsResponse_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_CacheStatsResponse_default_instance_;
    new (ptr) ::Kuser::CacheStatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::CacheStatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CacheStatsResponse_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CacheStatsResponse_user_2eproto}, {
      &scc_info_ResultCode_user_2eproto.base,}};

static void InitDefaultsscc_info_GetUserProfileRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_GetUserProfileRequest_default_instance_;
    new (ptr) ::Kuser::GetUserProfileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::GetUserProfileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUserProfileRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUserProfileRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_GetUserProfileResponse_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_GetUserProfileResponse_default_instance_;
    new (ptr) ::Kuser::GetUserProfileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::GetUserProfileResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUserProfileResponse_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUserProfileResponse_user_2eproto}, {
      &scc_info_ResultCode_user_2eproto.base,}};

static void InitDefaultsscc_info_LoginRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_LoginRequest_default_instance_;
    new (ptr) ::Kuser::LoginRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::LoginRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoginRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoginRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_LoginResponse_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_LoginResponse_default_instance_;
    new (ptr) ::Kuser::LoginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::LoginResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoginResponse_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoginResponse_user_2eproto}, {
      &scc_info_ResultCode_user_2eproto.base,}};

static void InitDefaultsscc_info_RegisterRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_RegisterRequest_default_instance_;
    new (ptr) ::Kuser::RegisterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::RegisterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_RegisterResponse_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_RegisterResponse_default_instance_;
    new (ptr) ::Kuser::RegisterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::RegisterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisterResponse_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegisterResponse_user_2eproto}, {
      &scc_info_ResultCode_user_2eproto.base,}};

static void InitDefaultsscc_info_ResultCode_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_ResultCode_default_instance_;
    new (ptr) ::Kuser::ResultCode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::ResultCode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResultCode_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResultCode_user_2eproto}, {}};

static void InitDefaultsscc_info_SumToNRequest_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_SumToNRequest_default_instance_;
    new (ptr) ::Kuser::SumToNRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::SumToNRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SumToNRequest_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SumToNRequest_user_2eproto}, {}};

static void InitDefaultsscc_info_SumToNResponse_user_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Kuser::_SumToNResponse_default_instance_;
    new (ptr) ::Kuser::SumToNResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kuser::SumToNResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SumToNResponse_user_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SumToNResponse_user_2eproto}, {
      &scc_info_ResultCode_user_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_user_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_user_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_user_2eproto[2];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_user_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::ResultCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::ResultCode, errcode_),
  PROTOBUF_FIELD_OFFSET(::Kuser::ResultCode, errmsg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::LoginRequest, name_),
  PROTOBUF_FIELD_OFFSET(::Kuser::LoginRequest, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::LoginResponse, result_),
  PROTOBUF_FIELD_OFFSET(::Kuser::LoginResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::RegisterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::RegisterRequest, id_),
  PROTOBUF_FIELD_OFFSET(::Kuser::RegisterRequest, name_),
  PROTOBUF_FIELD_OFFSET(::Kuser::RegisterRequest, pwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::RegisterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::RegisterResponse, result_),
  PROTOBUF_FIELD_OFFSET(::Kuser::RegisterResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::SumToNRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::SumToNRequest, n_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::SumToNResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::SumToNResponse, result_),
  PROTOBUF_FIELD_OFFSET(::Kuser::SumToNResponse, sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::GetUserProfileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::GetUserProfileRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::GetUserProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::GetUserProfileResponse, result_),
  PROTOBUF_FIELD_OFFSET(::Kuser::GetUserProfileResponse, profile_data_),
  PROTOBUF_FIELD_OFFSET(::Kuser::GetUserProfileResponse, from_cache_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheSetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheSetRequest, key_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheSetRequest, value_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheSetRequest, expire_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheGetRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheGetResponse, result_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheGetResponse, value_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheGetResponse, exists_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheGetResponse, expire_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheDeleteRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheBatchGetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheBatchGetRequest, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheItem, key_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheItem, value_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheItem, exists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheBatchGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheBatchGetResponse, result_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheBatchGetResponse, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheExistsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheExistsRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheExistsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheExistsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheExistsResponse, exists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheStatsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheStatsResponse, total_keys_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheStatsResponse, memory_usage_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheStatsResponse, hit_count_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheStatsResponse, miss_count_),
  PROTOBUF_FIELD_OFFSET(::Kuser::CacheStatsResponse, hit_rate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Kuser::ResultCode)},
  { 7, -1, sizeof(::Kuser::LoginRequest)},
  { 14, -1, sizeof(::Kuser::LoginResponse)},
  { 21, -1, sizeof(::Kuser::RegisterRequest)},
  { 29, -1, sizeof(::Kuser::RegisterResponse)},
  { 36, -1, sizeof(::Kuser::SumToNRequest)},
  { 42, -1, sizeof(::Kuser::SumToNResponse)},
  { 49, -1, sizeof(::Kuser::GetUserProfileRequest)},
  { 55, -1, sizeof(::Kuser::GetUserProfileResponse)},
  { 63, -1, sizeof(::Kuser::CacheSetRequest)},
  { 71, -1, sizeof(::Kuser::CacheGetRequest)},
  { 77, -1, sizeof(::Kuser::CacheGetResponse)},
  { 86, -1, sizeof(::Kuser::CacheDeleteRequest)},
  { 92, -1, sizeof(::Kuser::CacheBatchGetRequest)},
  { 98, -1, sizeof(::Kuser::CacheItem)},
  { 106, -1, sizeof(::Kuser::CacheBatchGetResponse)},
  { 113, -1, sizeof(::Kuser::CacheExistsRequest)},
  { 119, -1, sizeof(::Kuser::CacheExistsResponse)},
  { 126, -1, sizeof(::Kuser::CacheStatsRequest)},
  { 131, -1, sizeof(::Kuser::CacheStatsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_ResultCode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_LoginRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_LoginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_RegisterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_RegisterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_SumToNRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_SumToNResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_GetUserProfileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_GetUserProfileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheSetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheBatchGetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheBatchGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheExistsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheExistsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheStatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Kuser::_CacheStatsResponse_default_instance_),
};

const char descriptor_table_protodef_user_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nuser.proto\022\005Kuser\"-\n\nResultCode\022\017\n\007err"
  "code\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\014\")\n\014LoginReque"
  "st\022\014\n\004name\030\001 \001(\014\022\013\n\003pwd\030\002 \001(\014\"C\n\rLoginRe"
  "sponse\022!\n\006result\030\001 \001(\0132\021.Kuser.ResultCod"
  "e\022\017\n\007success\030\002 \001(\010\"8\n\017RegisterRequest\022\n\n"
  "\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003pwd\030\003 \001(\014\"F\n\020"
  "RegisterResponse\022!\n\006result\030\001 \001(\0132\021.Kuser"
  ".ResultCode\022\017\n\007success\030\002 \001(\010\"\032\n\rSumToNRe"
  "quest\022\t\n\001n\030\001 \001(\005\"@\n\016SumToNResponse\022!\n\006re"
  "sult\030\001 \001(\0132\021.Kuser.ResultCode\022\013\n\003sum\030\002 \001"
  "(\005\"(\n\025GetUserProfileRequest\022\017\n\007user_id\030\001"
  " \001(\r\"e\n\026GetUserProfileResponse\022!\n\006result"
  "\030\001 \001(\0132\021.Kuser.ResultCode\022\024\n\014profile_dat"
  "a\030\002 \001(\014\022\022\n\nfrom_cache\030\003 \001(\010\"E\n\017CacheSetR"
  "equest\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\026\n\016ex"
  "pire_seconds\030\003 \001(\005\"\036\n\017CacheGetRequest\022\013\n"
  "\003key\030\001 \001(\014\"i\n\020CacheGetResponse\022!\n\006result"
  "\030\001 \001(\0132\021.Kuser.ResultCode\022\r\n\005value\030\002 \001(\014"
  "\022\016\n\006exists\030\003 \001(\010\022\023\n\013expire_time\030\004 \001(\003\"!\n"
  "\022CacheDeleteRequest\022\013\n\003key\030\001 \001(\014\"$\n\024Cach"
  "eBatchGetRequest\022\014\n\004keys\030\001 \003(\014\"7\n\tCacheI"
  "tem\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\022\016\n\006exist"
  "s\030\003 \001(\010\"[\n\025CacheBatchGetResponse\022!\n\006resu"
  "lt\030\001 \001(\0132\021.Kuser.ResultCode\022\037\n\005items\030\002 \003"
  "(\0132\020.Kuser.CacheItem\"!\n\022CacheExistsReque"
  "st\022\013\n\003key\030\001 \001(\014\"H\n\023CacheExistsResponse\022!"
  "\n\006result\030\001 \001(\0132\021.Kuser.ResultCode\022\016\n\006exi"
  "sts\030\002 \001(\010\"\023\n\021CacheStatsRequest\"\232\001\n\022Cache"
  "StatsResponse\022!\n\006result\030\001 \001(\0132\021.Kuser.Re"
  "sultCode\022\022\n\ntotal_keys\030\002 \001(\003\022\024\n\014memory_u"
  "sage\030\003 \001(\003\022\021\n\thit_count\030\004 \001(\003\022\022\n\nmiss_co"
  "unt\030\005 \001(\003\022\020\n\010hit_rate\030\006 \001(\0012\207\002\n\016UserServ"
  "iceRpc\0222\n\005Login\022\023.Kuser.LoginRequest\032\024.K"
  "user.LoginResponse\022;\n\010Register\022\026.Kuser.R"
  "egisterRequest\032\027.Kuser.RegisterResponse\022"
  "5\n\006SumtoN\022\024.Kuser.SumToNRequest\032\025.Kuser."
  "SumToNResponse\022M\n\016GetUserProfile\022\034.Kuser"
  ".GetUserProfileRequest\032\035.Kuser.GetUserPr"
  "ofileResponse2\374\002\n\017CacheServiceRpc\0220\n\003Set"
  "\022\026.Kuser.CacheSetRequest\032\021.Kuser.ResultC"
  "ode\0226\n\003Get\022\026.Kuser.CacheGetRequest\032\027.Kus"
  "er.CacheGetResponse\0226\n\006Delete\022\031.Kuser.Ca"
  "cheDeleteRequest\032\021.Kuser.ResultCode\022\?\n\006E"
  "xists\022\031.Kuser.CacheExistsRequest\032\032.Kuser"
  ".CacheExistsResponse\022E\n\010BatchGet\022\033.Kuser"
  ".CacheBatchGetRequest\032\034.Kuser.CacheBatch"
  "GetResponse\022\?\n\010GetStats\022\030.Kuser.CacheSta"
  "tsRequest\032\031.Kuser.CacheStatsResponseB\003\200\001"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_user_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_user_2eproto_sccs[20] = {
  &scc_info_CacheBatchGetRequest_user_2eproto.base,
  &scc_info_CacheBatchGetResponse_user_2eproto.base,
  &scc_info_CacheDeleteRequest_user_2eproto.base,
  &scc_info_CacheExistsRequest_user_2eproto.base,
  &scc_info_CacheExistsResponse_user_2eproto.base,
  &scc_info_CacheGetRequest_user_2eproto.base,
  &scc_info_CacheGetResponse_user_2eproto.base,
  &scc_info_CacheItem_user_2eproto.base,
  &scc_info_CacheSetRequest_user_2eproto.base,
  &scc_info_CacheStatsRequest_user_2eproto.base,
  &scc_info_CacheStatsResponse_user_2eproto.base,
  &scc_info_GetUserProfileRequest_user_2eproto.base,
  &scc_info_GetUserProfileResponse_user_2eproto.base,
  &scc_info_LoginRequest_user_2eproto.base,
  &scc_info_LoginResponse_user_2eproto.base,
  &scc_info_RegisterRequest_user_2eproto.base,
  &scc_info_RegisterResponse_user_2eproto.base,
  &scc_info_ResultCode_user_2eproto.base,
  &scc_info_SumToNRequest_user_2eproto.base,
  &scc_info_SumToNResponse_user_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_user_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto = {
  false, false, descriptor_table_protodef_user_2eproto, "user.proto", 1929,
  &descriptor_table_user_2eproto_once, descriptor_table_user_2eproto_sccs, descriptor_table_user_2eproto_deps, 20, 0,
  schemas, file_default_instances, TableStruct_user_2eproto::offsets,
  file_level_metadata_user_2eproto, 20, file_level_enum_descriptors_user_2eproto, file_level_service_descriptors_user_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_user_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_user_2eproto)), true);
namespace Kuser {

// ===================================================================

void ResultCode::InitAsDefaultInstance() {
}
class ResultCode::_Internal {
 public:
};

ResultCode::ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.ResultCode)
}
ResultCode::ResultCode(const ResultCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmsg().empty()) {
    errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_errmsg(),
      GetArena());
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:Kuser.ResultCode)
}

void ResultCode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResultCode_user_2eproto.base);
  errmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
}

ResultCode::~ResultCode() {
  // @@protoc_insertion_point(destructor:Kuser.ResultCode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResultCode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  errmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResultCode::ArenaDtor(void* object) {
  ResultCode* _this = reinterpret_cast< ResultCode* >(object);
  (void)_this;
}
void ResultCode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResultCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResultCode& ResultCode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResultCode_user_2eproto.base);
  return *internal_default_instance();
}


void ResultCode::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  errcode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultCode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 errcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes errmsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_errmsg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResultCode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.ResultCode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_errcode(), target);
  }

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_errmsg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.ResultCode)
  return target;
}

size_t ResultCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.ResultCode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_errmsg());
  }

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResultCode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  const ResultCode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResultCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.ResultCode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.ResultCode)
    MergeFrom(*source);
  }
}

void ResultCode::MergeFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.ResultCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {
    _internal_set_errmsg(from._internal_errmsg());
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void ResultCode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultCode::CopyFrom(const ResultCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.ResultCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultCode::IsInitialized() const {
  return true;
}

void ResultCode::InternalSwap(ResultCode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  errmsg_.Swap(&other->errmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultCode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
}
class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pwd(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Kuser.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginRequest_user_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:Kuser.LoginRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::ArenaDtor(void* object) {
  LoginRequest* _this = reinterpret_cast< LoginRequest* >(object);
  (void)_this;
}
void LoginRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginRequest& LoginRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginRequest_user_2eproto.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.LoginRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes pwd = 2;
  if (this->pwd().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.LoginRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes pwd = 2;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pwd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.LoginRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.pwd().size() > 0) {
    _internal_set_pwd(from._internal_pwd());
  }
}

void LoginRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
  ::Kuser::_LoginResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Kuser::ResultCode*>(
      ::Kuser::ResultCode::internal_default_instance());
}
class LoginResponse::_Internal {
 public:
  static const ::Kuser::ResultCode& result(const LoginResponse* msg);
};

const ::Kuser::ResultCode&
LoginResponse::_Internal::result(const LoginResponse* msg) {
  return *msg->result_;
}
LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::Kuser::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:Kuser.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoginResponse_user_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:Kuser.LoginResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void LoginResponse::ArenaDtor(void* object) {
  LoginResponse* _this = reinterpret_cast< LoginResponse* >(object);
  (void)_this;
}
void LoginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoginResponse& LoginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoginResponse_user_2eproto.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Kuser.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.LoginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.LoginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.LoginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::Kuser::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void LoginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse, success_)
      + sizeof(LoginResponse::success_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterRequest::InitAsDefaultInstance() {
}
class RegisterRequest::_Internal {
 public:
};

RegisterRequest::RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.RegisterRequest)
}
RegisterRequest::RegisterRequest(const RegisterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pwd().empty()) {
    pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pwd(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Kuser.RegisterRequest)
}

void RegisterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterRequest_user_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:Kuser.RegisterRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterRequest::ArenaDtor(void* object) {
  RegisterRequest* _this = reinterpret_cast< RegisterRequest* >(object);
  (void)_this;
}
void RegisterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterRequest& RegisterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterRequest_user_2eproto.base);
  return *internal_default_instance();
}


void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pwd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pwd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.RegisterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes pwd = 3;
  if (this->pwd().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.RegisterRequest)
  return target;
}

size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.RegisterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes pwd = 3;
  if (this->pwd().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pwd());
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.RegisterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.RegisterRequest)
    MergeFrom(*source);
  }
}

void RegisterRequest::MergeFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.RegisterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.pwd().size() > 0) {
    _internal_set_pwd(from._internal_pwd());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void RegisterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRequest::IsInitialized() const {
  return true;
}

void RegisterRequest::InternalSwap(RegisterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pwd_.Swap(&other->pwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterResponse::InitAsDefaultInstance() {
  ::Kuser::_RegisterResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Kuser::ResultCode*>(
      ::Kuser::ResultCode::internal_default_instance());
}
class RegisterResponse::_Internal {
 public:
  static const ::Kuser::ResultCode& result(const RegisterResponse* msg);
};

const ::Kuser::ResultCode&
RegisterResponse::_Internal::result(const RegisterResponse* msg) {
  return *msg->result_;
}
RegisterResponse::RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.RegisterResponse)
}
RegisterResponse::RegisterResponse(const RegisterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::Kuser::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:Kuser.RegisterResponse)
}

void RegisterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterResponse_user_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&result_)) + sizeof(success_));
}

RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:Kuser.RegisterResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void RegisterResponse::ArenaDtor(void* object) {
  RegisterResponse* _this = reinterpret_cast< RegisterResponse* >(object);
  (void)_this;
}
void RegisterResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterResponse& RegisterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterResponse_user_2eproto.base);
  return *internal_default_instance();
}


void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.RegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Kuser.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.RegisterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.RegisterResponse)
  return target;
}

size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.RegisterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.RegisterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.RegisterResponse)
    MergeFrom(*source);
  }
}

void RegisterResponse::MergeFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.RegisterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::Kuser::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RegisterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterResponse::IsInitialized() const {
  return true;
}

void RegisterResponse::InternalSwap(RegisterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterResponse, success_)
      + sizeof(RegisterResponse::success_)
      - PROTOBUF_FIELD_OFFSET(RegisterResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SumToNRequest::InitAsDefaultInstance() {
}
class SumToNRequest::_Internal {
 public:
};

SumToNRequest::SumToNRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.SumToNRequest)
}
SumToNRequest::SumToNRequest(const SumToNRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:Kuser.SumToNRequest)
}

void SumToNRequest::SharedCtor() {
  n_ = 0;
}

SumToNRequest::~SumToNRequest() {
  // @@protoc_insertion_point(destructor:Kuser.SumToNRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SumToNRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SumToNRequest::ArenaDtor(void* object) {
  SumToNRequest* _this = reinterpret_cast< SumToNRequest* >(object);
  (void)_this;
}
void SumToNRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SumToNRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SumToNRequest& SumToNRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SumToNRequest_user_2eproto.base);
  return *internal_default_instance();
}


void SumToNRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.SumToNRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SumToNRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SumToNRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.SumToNRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_n(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.SumToNRequest)
  return target;
}

size_t SumToNRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.SumToNRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n = 1;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SumToNRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.SumToNRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SumToNRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SumToNRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.SumToNRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.SumToNRequest)
    MergeFrom(*source);
  }
}

void SumToNRequest::MergeFrom(const SumToNRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.SumToNRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
}

void SumToNRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.SumToNRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SumToNRequest::CopyFrom(const SumToNRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.SumToNRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumToNRequest::IsInitialized() const {
  return true;
}

void SumToNRequest::InternalSwap(SumToNRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(n_, other->n_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SumToNRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SumToNResponse::InitAsDefaultInstance() {
  ::Kuser::_SumToNResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Kuser::ResultCode*>(
      ::Kuser::ResultCode::internal_default_instance());
}
class SumToNResponse::_Internal {
 public:
  static const ::Kuser::ResultCode& result(const SumToNResponse* msg);
};

const ::Kuser::ResultCode&
SumToNResponse::_Internal::result(const SumToNResponse* msg) {
  return *msg->result_;
}
SumToNResponse::SumToNResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.SumToNResponse)
}
SumToNResponse::SumToNResponse(const SumToNResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::Kuser::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  sum_ = from.sum_;
  // @@protoc_insertion_point(copy_constructor:Kuser.SumToNResponse)
}

void SumToNResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SumToNResponse_user_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_) -
      reinterpret_cast<char*>(&result_)) + sizeof(sum_));
}

SumToNResponse::~SumToNResponse() {
  // @@protoc_insertion_point(destructor:Kuser.SumToNResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SumToNResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void SumToNResponse::ArenaDtor(void* object) {
  SumToNResponse* _this = reinterpret_cast< SumToNResponse* >(object);
  (void)_this;
}
void SumToNResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SumToNResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SumToNResponse& SumToNResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SumToNResponse_user_2eproto.base);
  return *internal_default_instance();
}


void SumToNResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.SumToNResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  sum_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SumToNResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Kuser.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SumToNResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.SumToNResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // int32 sum = 2;
  if (this->sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.SumToNResponse)
  return target;
}

size_t SumToNResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.SumToNResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int32 sum = 2;
  if (this->sum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SumToNResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.SumToNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SumToNResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SumToNResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.SumToNResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.SumToNResponse)
    MergeFrom(*source);
  }
}

void SumToNResponse::MergeFrom(const SumToNResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.SumToNResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::Kuser::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.sum() != 0) {
    _internal_set_sum(from._internal_sum());
  }
}

void SumToNResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.SumToNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SumToNResponse::CopyFrom(const SumToNResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.SumToNResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumToNResponse::IsInitialized() const {
  return true;
}

void SumToNResponse::InternalSwap(SumToNResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SumToNResponse, sum_)
      + sizeof(SumToNResponse::sum_)
      - PROTOBUF_FIELD_OFFSET(SumToNResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SumToNResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserProfileRequest::InitAsDefaultInstance() {
}
class GetUserProfileRequest::_Internal {
 public:
};

GetUserProfileRequest::GetUserProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.GetUserProfileRequest)
}
GetUserProfileRequest::GetUserProfileRequest(const GetUserProfileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:Kuser.GetUserProfileRequest)
}

void GetUserProfileRequest::SharedCtor() {
  user_id_ = 0u;
}

GetUserProfileRequest::~GetUserProfileRequest() {
  // @@protoc_insertion_point(destructor:Kuser.GetUserProfileRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserProfileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetUserProfileRequest::ArenaDtor(void* object) {
  GetUserProfileRequest* _this = reinterpret_cast< GetUserProfileRequest* >(object);
  (void)_this;
}
void GetUserProfileRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserProfileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserProfileRequest& GetUserProfileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserProfileRequest_user_2eproto.base);
  return *internal_default_instance();
}


void GetUserProfileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.GetUserProfileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserProfileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserProfileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.GetUserProfileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.GetUserProfileRequest)
  return target;
}

size_t GetUserProfileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.GetUserProfileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserProfileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.GetUserProfileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserProfileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserProfileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.GetUserProfileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.GetUserProfileRequest)
    MergeFrom(*source);
  }
}

void GetUserProfileRequest::MergeFrom(const GetUserProfileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.GetUserProfileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
}

void GetUserProfileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.GetUserProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserProfileRequest::CopyFrom(const GetUserProfileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.GetUserProfileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserProfileRequest::IsInitialized() const {
  return true;
}

void GetUserProfileRequest::InternalSwap(GetUserProfileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_id_, other->user_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserProfileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserProfileResponse::InitAsDefaultInstance() {
  ::Kuser::_GetUserProfileResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Kuser::ResultCode*>(
      ::Kuser::ResultCode::internal_default_instance());
}
class GetUserProfileResponse::_Internal {
 public:
  static const ::Kuser::ResultCode& result(const GetUserProfileResponse* msg);
};

const ::Kuser::ResultCode&
GetUserProfileResponse::_Internal::result(const GetUserProfileResponse* msg) {
  return *msg->result_;
}
GetUserProfileResponse::GetUserProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.GetUserProfileResponse)
}
GetUserProfileResponse::GetUserProfileResponse(const GetUserProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  profile_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_profile_data().empty()) {
    profile_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_profile_data(),
      GetArena());
  }
  if (from._internal_has_result()) {
    result_ = new ::Kuser::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  from_cache_ = from.from_cache_;
  // @@protoc_insertion_point(copy_constructor:Kuser.GetUserProfileResponse)
}

void GetUserProfileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUserProfileResponse_user_2eproto.base);
  profile_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_cache_) -
      reinterpret_cast<char*>(&result_)) + sizeof(from_cache_));
}

GetUserProfileResponse::~GetUserProfileResponse() {
  // @@protoc_insertion_point(destructor:Kuser.GetUserProfileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  profile_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void GetUserProfileResponse::ArenaDtor(void* object) {
  GetUserProfileResponse* _this = reinterpret_cast< GetUserProfileResponse* >(object);
  (void)_this;
}
void GetUserProfileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserProfileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserProfileResponse& GetUserProfileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserProfileResponse_user_2eproto.base);
  return *internal_default_instance();
}


void GetUserProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.GetUserProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  from_cache_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserProfileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Kuser.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes profile_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_profile_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool from_cache = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          from_cache_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserProfileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.GetUserProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bytes profile_data = 2;
  if (this->profile_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_profile_data(), target);
  }

  // bool from_cache = 3;
  if (this->from_cache() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_from_cache(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.GetUserProfileResponse)
  return target;
}

size_t GetUserProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.GetUserProfileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes profile_data = 2;
  if (this->profile_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_profile_data());
  }

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool from_cache = 3;
  if (this->from_cache() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserProfileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.GetUserProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserProfileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserProfileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.GetUserProfileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.GetUserProfileResponse)
    MergeFrom(*source);
  }
}

void GetUserProfileResponse::MergeFrom(const GetUserProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.GetUserProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.profile_data().size() > 0) {
    _internal_set_profile_data(from._internal_profile_data());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::Kuser::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.from_cache() != 0) {
    _internal_set_from_cache(from._internal_from_cache());
  }
}

void GetUserProfileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.GetUserProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserProfileResponse::CopyFrom(const GetUserProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.GetUserProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserProfileResponse::IsInitialized() const {
  return true;
}

void GetUserProfileResponse::InternalSwap(GetUserProfileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  profile_data_.Swap(&other->profile_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUserProfileResponse, from_cache_)
      + sizeof(GetUserProfileResponse::from_cache_)
      - PROTOBUF_FIELD_OFFSET(GetUserProfileResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserProfileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheSetRequest::InitAsDefaultInstance() {
}
class CacheSetRequest::_Internal {
 public:
};

CacheSetRequest::CacheSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheSetRequest)
}
CacheSetRequest::CacheSetRequest(const CacheSetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  expire_seconds_ = from.expire_seconds_;
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheSetRequest)
}

void CacheSetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheSetRequest_user_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_seconds_ = 0;
}

CacheSetRequest::~CacheSetRequest() {
  // @@protoc_insertion_point(destructor:Kuser.CacheSetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheSetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheSetRequest::ArenaDtor(void* object) {
  CacheSetRequest* _this = reinterpret_cast< CacheSetRequest* >(object);
  (void)_this;
}
void CacheSetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheSetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheSetRequest& CacheSetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheSetRequest_user_2eproto.base);
  return *internal_default_instance();
}


void CacheSetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expire_seconds_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheSetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expire_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expire_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheSetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheSetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int32 expire_seconds = 3;
  if (this->expire_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_expire_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheSetRequest)
  return target;
}

size_t CacheSetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheSetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 expire_seconds = 3;
  if (this->expire_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expire_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheSetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheSetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheSetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheSetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheSetRequest)
    MergeFrom(*source);
  }
}

void CacheSetRequest::MergeFrom(const CacheSetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheSetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.expire_seconds() != 0) {
    _internal_set_expire_seconds(from._internal_expire_seconds());
  }
}

void CacheSetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheSetRequest::CopyFrom(const CacheSetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheSetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheSetRequest::IsInitialized() const {
  return true;
}

void CacheSetRequest::InternalSwap(CacheSetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expire_seconds_, other->expire_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheSetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheGetRequest::InitAsDefaultInstance() {
}
class CacheGetRequest::_Internal {
 public:
};

CacheGetRequest::CacheGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheGetRequest)
}
CacheGetRequest::CacheGetRequest(const CacheGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheGetRequest)
}

void CacheGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheGetRequest_user_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CacheGetRequest::~CacheGetRequest() {
  // @@protoc_insertion_point(destructor:Kuser.CacheGetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheGetRequest::ArenaDtor(void* object) {
  CacheGetRequest* _this = reinterpret_cast< CacheGetRequest* >(object);
  (void)_this;
}
void CacheGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheGetRequest& CacheGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheGetRequest_user_2eproto.base);
  return *internal_default_instance();
}


void CacheGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheGetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheGetRequest)
  return target;
}

size_t CacheGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheGetRequest)
    MergeFrom(*source);
  }
}

void CacheGetRequest::MergeFrom(const CacheGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void CacheGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheGetRequest::CopyFrom(const CacheGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheGetRequest::IsInitialized() const {
  return true;
}

void CacheGetRequest::InternalSwap(CacheGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheGetResponse::InitAsDefaultInstance() {
  ::Kuser::_CacheGetResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Kuser::ResultCode*>(
      ::Kuser::ResultCode::internal_default_instance());
}
class CacheGetResponse::_Internal {
 public:
  static const ::Kuser::ResultCode& result(const CacheGetResponse* msg);
};

const ::Kuser::ResultCode&
CacheGetResponse::_Internal::result(const CacheGetResponse* msg) {
  return *msg->result_;
}
CacheGetResponse::CacheGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheGetResponse)
}
CacheGetResponse::CacheGetResponse(const CacheGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  if (from._internal_has_result()) {
    result_ = new ::Kuser::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&expire_time_, &from.expire_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&exists_) -
    reinterpret_cast<char*>(&expire_time_)) + sizeof(exists_));
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheGetResponse)
}

void CacheGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheGetResponse_user_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exists_) -
      reinterpret_cast<char*>(&result_)) + sizeof(exists_));
}

CacheGetResponse::~CacheGetResponse() {
  // @@protoc_insertion_point(destructor:Kuser.CacheGetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_;
}

void CacheGetResponse::ArenaDtor(void* object) {
  CacheGetResponse* _this = reinterpret_cast< CacheGetResponse* >(object);
  (void)_this;
}
void CacheGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheGetResponse& CacheGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheGetResponse_user_2eproto.base);
  return *internal_default_instance();
}


void CacheGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&expire_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exists_) -
      reinterpret_cast<char*>(&expire_time_)) + sizeof(exists_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Kuser.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exists = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheGetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bool exists = 3;
  if (this->exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_exists(), target);
  }

  // int64 expire_time = 4;
  if (this->expire_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_expire_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheGetResponse)
  return target;
}

size_t CacheGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int64 expire_time = 4;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expire_time());
  }

  // bool exists = 3;
  if (this->exists() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheGetResponse)
    MergeFrom(*source);
  }
}

void CacheGetResponse::MergeFrom(const CacheGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.has_result()) {
    _internal_mutable_result()->::Kuser::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.expire_time() != 0) {
    _internal_set_expire_time(from._internal_expire_time());
  }
  if (from.exists() != 0) {
    _internal_set_exists(from._internal_exists());
  }
}

void CacheGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheGetResponse::CopyFrom(const CacheGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheGetResponse::IsInitialized() const {
  return true;
}

void CacheGetResponse::InternalSwap(CacheGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheGetResponse, exists_)
      + sizeof(CacheGetResponse::exists_)
      - PROTOBUF_FIELD_OFFSET(CacheGetResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheDeleteRequest::InitAsDefaultInstance() {
}
class CacheDeleteRequest::_Internal {
 public:
};

CacheDeleteRequest::CacheDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheDeleteRequest)
}
CacheDeleteRequest::CacheDeleteRequest(const CacheDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheDeleteRequest)
}

void CacheDeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheDeleteRequest_user_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CacheDeleteRequest::~CacheDeleteRequest() {
  // @@protoc_insertion_point(destructor:Kuser.CacheDeleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheDeleteRequest::ArenaDtor(void* object) {
  CacheDeleteRequest* _this = reinterpret_cast< CacheDeleteRequest* >(object);
  (void)_this;
}
void CacheDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheDeleteRequest& CacheDeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheDeleteRequest_user_2eproto.base);
  return *internal_default_instance();
}


void CacheDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheDeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheDeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheDeleteRequest)
  return target;
}

size_t CacheDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheDeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheDeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheDeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheDeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheDeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheDeleteRequest)
    MergeFrom(*source);
  }
}

void CacheDeleteRequest::MergeFrom(const CacheDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void CacheDeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDeleteRequest::CopyFrom(const CacheDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDeleteRequest::IsInitialized() const {
  return true;
}

void CacheDeleteRequest::InternalSwap(CacheDeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheDeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheBatchGetRequest::InitAsDefaultInstance() {
}
class CacheBatchGetRequest::_Internal {
 public:
};

CacheBatchGetRequest::CacheBatchGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheBatchGetRequest)
}
CacheBatchGetRequest::CacheBatchGetRequest(const CacheBatchGetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheBatchGetRequest)
}

void CacheBatchGetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheBatchGetRequest_user_2eproto.base);
}

CacheBatchGetRequest::~CacheBatchGetRequest() {
  // @@protoc_insertion_point(destructor:Kuser.CacheBatchGetRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheBatchGetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CacheBatchGetRequest::ArenaDtor(void* object) {
  CacheBatchGetRequest* _this = reinterpret_cast< CacheBatchGetRequest* >(object);
  (void)_this;
}
void CacheBatchGetRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheBatchGetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheBatchGetRequest& CacheBatchGetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheBatchGetRequest_user_2eproto.base);
  return *internal_default_instance();
}


void CacheBatchGetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheBatchGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheBatchGetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheBatchGetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheBatchGetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheBatchGetRequest)
  return target;
}

size_t CacheBatchGetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheBatchGetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      keys_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheBatchGetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheBatchGetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheBatchGetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheBatchGetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheBatchGetRequest)
    MergeFrom(*source);
  }
}

void CacheBatchGetRequest::MergeFrom(const CacheBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheBatchGetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void CacheBatchGetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheBatchGetRequest::CopyFrom(const CacheBatchGetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheBatchGetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheBatchGetRequest::IsInitialized() const {
  return true;
}

void CacheBatchGetRequest::InternalSwap(CacheBatchGetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheBatchGetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheItem::InitAsDefaultInstance() {
}
class CacheItem::_Internal {
 public:
};

CacheItem::CacheItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheItem)
}
CacheItem::CacheItem(const CacheItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  exists_ = from.exists_;
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheItem)
}

void CacheItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheItem_user_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exists_ = false;
}

CacheItem::~CacheItem() {
  // @@protoc_insertion_point(destructor:Kuser.CacheItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheItem::ArenaDtor(void* object) {
  CacheItem* _this = reinterpret_cast< CacheItem* >(object);
  (void)_this;
}
void CacheItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheItem& CacheItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheItem_user_2eproto.base);
  return *internal_default_instance();
}


void CacheItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exists_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exists = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // bool exists = 3;
  if (this->exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_exists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheItem)
  return target;
}

size_t CacheItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // bool exists = 3;
  if (this->exists() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheItem)
    MergeFrom(*source);
  }
}

void CacheItem::MergeFrom(const CacheItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.exists() != 0) {
    _internal_set_exists(from._internal_exists());
  }
}

void CacheItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheItem::CopyFrom(const CacheItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheItem::IsInitialized() const {
  return true;
}

void CacheItem::InternalSwap(CacheItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(exists_, other->exists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheBatchGetResponse::InitAsDefaultInstance() {
  ::Kuser::_CacheBatchGetResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Kuser::ResultCode*>(
      ::Kuser::ResultCode::internal_default_instance());
}
class CacheBatchGetResponse::_Internal {
 public:
  static const ::Kuser::ResultCode& result(const CacheBatchGetResponse* msg);
};

const ::Kuser::ResultCode&
CacheBatchGetResponse::_Internal::result(const CacheBatchGetResponse* msg) {
  return *msg->result_;
}
CacheBatchGetResponse::CacheBatchGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheBatchGetResponse)
}
CacheBatchGetResponse::CacheBatchGetResponse(const CacheBatchGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::Kuser::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheBatchGetResponse)
}

void CacheBatchGetResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheBatchGetResponse_user_2eproto.base);
  result_ = nullptr;
}

CacheBatchGetResponse::~CacheBatchGetResponse() {
  // @@protoc_insertion_point(destructor:Kuser.CacheBatchGetResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheBatchGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void CacheBatchGetResponse::ArenaDtor(void* object) {
  CacheBatchGetResponse* _this = reinterpret_cast< CacheBatchGetResponse* >(object);
  (void)_this;
}
void CacheBatchGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheBatchGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheBatchGetResponse& CacheBatchGetResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheBatchGetResponse_user_2eproto.base);
  return *internal_default_instance();
}


void CacheBatchGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheBatchGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheBatchGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Kuser.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Kuser.CacheItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheBatchGetResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheBatchGetResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // repeated .Kuser.CacheItem items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheBatchGetResponse)
  return target;
}

size_t CacheBatchGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheBatchGetResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Kuser.CacheItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheBatchGetResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheBatchGetResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheBatchGetResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheBatchGetResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheBatchGetResponse)
    MergeFrom(*source);
  }
}

void CacheBatchGetResponse::MergeFrom(const CacheBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheBatchGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_result()) {
    _internal_mutable_result()->::Kuser::ResultCode::MergeFrom(from._internal_result());
  }
}

void CacheBatchGetResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheBatchGetResponse::CopyFrom(const CacheBatchGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheBatchGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheBatchGetResponse::IsInitialized() const {
  return true;
}

void CacheBatchGetResponse::InternalSwap(CacheBatchGetResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheBatchGetResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheExistsRequest::InitAsDefaultInstance() {
}
class CacheExistsRequest::_Internal {
 public:
};

CacheExistsRequest::CacheExistsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheExistsRequest)
}
CacheExistsRequest::CacheExistsRequest(const CacheExistsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheExistsRequest)
}

void CacheExistsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheExistsRequest_user_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CacheExistsRequest::~CacheExistsRequest() {
  // @@protoc_insertion_point(destructor:Kuser.CacheExistsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheExistsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CacheExistsRequest::ArenaDtor(void* object) {
  CacheExistsRequest* _this = reinterpret_cast< CacheExistsRequest* >(object);
  (void)_this;
}
void CacheExistsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheExistsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheExistsRequest& CacheExistsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheExistsRequest_user_2eproto.base);
  return *internal_default_instance();
}


void CacheExistsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheExistsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheExistsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheExistsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheExistsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheExistsRequest)
  return target;
}

size_t CacheExistsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheExistsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheExistsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheExistsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheExistsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheExistsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheExistsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheExistsRequest)
    MergeFrom(*source);
  }
}

void CacheExistsRequest::MergeFrom(const CacheExistsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheExistsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
}

void CacheExistsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheExistsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheExistsRequest::CopyFrom(const CacheExistsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheExistsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheExistsRequest::IsInitialized() const {
  return true;
}

void CacheExistsRequest::InternalSwap(CacheExistsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheExistsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheExistsResponse::InitAsDefaultInstance() {
  ::Kuser::_CacheExistsResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Kuser::ResultCode*>(
      ::Kuser::ResultCode::internal_default_instance());
}
class CacheExistsResponse::_Internal {
 public:
  static const ::Kuser::ResultCode& result(const CacheExistsResponse* msg);
};

const ::Kuser::ResultCode&
CacheExistsResponse::_Internal::result(const CacheExistsResponse* msg) {
  return *msg->result_;
}
CacheExistsResponse::CacheExistsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheExistsResponse)
}
CacheExistsResponse::CacheExistsResponse(const CacheExistsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::Kuser::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  exists_ = from.exists_;
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheExistsResponse)
}

void CacheExistsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheExistsResponse_user_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exists_) -
      reinterpret_cast<char*>(&result_)) + sizeof(exists_));
}

CacheExistsResponse::~CacheExistsResponse() {
  // @@protoc_insertion_point(destructor:Kuser.CacheExistsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheExistsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void CacheExistsResponse::ArenaDtor(void* object) {
  CacheExistsResponse* _this = reinterpret_cast< CacheExistsResponse* >(object);
  (void)_this;
}
void CacheExistsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheExistsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheExistsResponse& CacheExistsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheExistsResponse_user_2eproto.base);
  return *internal_default_instance();
}


void CacheExistsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheExistsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  exists_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheExistsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Kuser.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheExistsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheExistsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // bool exists = 2;
  if (this->exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_exists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheExistsResponse)
  return target;
}

size_t CacheExistsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheExistsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // bool exists = 2;
  if (this->exists() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheExistsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheExistsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheExistsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheExistsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheExistsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheExistsResponse)
    MergeFrom(*source);
  }
}

void CacheExistsResponse::MergeFrom(const CacheExistsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheExistsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::Kuser::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.exists() != 0) {
    _internal_set_exists(from._internal_exists());
  }
}

void CacheExistsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheExistsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheExistsResponse::CopyFrom(const CacheExistsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheExistsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheExistsResponse::IsInitialized() const {
  return true;
}

void CacheExistsResponse::InternalSwap(CacheExistsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheExistsResponse, exists_)
      + sizeof(CacheExistsResponse::exists_)
      - PROTOBUF_FIELD_OFFSET(CacheExistsResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheExistsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheStatsRequest::InitAsDefaultInstance() {
}
class CacheStatsRequest::_Internal {
 public:
};

CacheStatsRequest::CacheStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheStatsRequest)
}
CacheStatsRequest::CacheStatsRequest(const CacheStatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheStatsRequest)
}

void CacheStatsRequest::SharedCtor() {
}

CacheStatsRequest::~CacheStatsRequest() {
  // @@protoc_insertion_point(destructor:Kuser.CacheStatsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheStatsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CacheStatsRequest::ArenaDtor(void* object) {
  CacheStatsRequest* _this = reinterpret_cast< CacheStatsRequest* >(object);
  (void)_this;
}
void CacheStatsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheStatsRequest& CacheStatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheStatsRequest_user_2eproto.base);
  return *internal_default_instance();
}


void CacheStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheStatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheStatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheStatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheStatsRequest)
  return target;
}

size_t CacheStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheStatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheStatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheStatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheStatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheStatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheStatsRequest)
    MergeFrom(*source);
  }
}

void CacheStatsRequest::MergeFrom(const CacheStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CacheStatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheStatsRequest::CopyFrom(const CacheStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheStatsRequest::IsInitialized() const {
  return true;
}

void CacheStatsRequest::InternalSwap(CacheStatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheStatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CacheStatsResponse::InitAsDefaultInstance() {
  ::Kuser::_CacheStatsResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::Kuser::ResultCode*>(
      ::Kuser::ResultCode::internal_default_instance());
}
class CacheStatsResponse::_Internal {
 public:
  static const ::Kuser::ResultCode& result(const CacheStatsResponse* msg);
};

const ::Kuser::ResultCode&
CacheStatsResponse::_Internal::result(const CacheStatsResponse* msg) {
  return *msg->result_;
}
CacheStatsResponse::CacheStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Kuser.CacheStatsResponse)
}
CacheStatsResponse::CacheStatsResponse(const CacheStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::Kuser::ResultCode(*from.result_);
  } else {
    result_ = nullptr;
  }
  ::memcpy(&total_keys_, &from.total_keys_,
    static_cast<size_t>(reinterpret_cast<char*>(&hit_rate_) -
    reinterpret_cast<char*>(&total_keys_)) + sizeof(hit_rate_));
  // @@protoc_insertion_point(copy_constructor:Kuser.CacheStatsResponse)
}

void CacheStatsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CacheStatsResponse_user_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hit_rate_) -
      reinterpret_cast<char*>(&result_)) + sizeof(hit_rate_));
}

CacheStatsResponse::~CacheStatsResponse() {
  // @@protoc_insertion_point(destructor:Kuser.CacheStatsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CacheStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void CacheStatsResponse::ArenaDtor(void* object) {
  CacheStatsResponse* _this = reinterpret_cast< CacheStatsResponse* >(object);
  (void)_this;
}
void CacheStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CacheStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CacheStatsResponse& CacheStatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CacheStatsResponse_user_2eproto.base);
  return *internal_default_instance();
}


void CacheStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:Kuser.CacheStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  ::memset(&total_keys_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hit_rate_) -
      reinterpret_cast<char*>(&total_keys_)) + sizeof(hit_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Kuser.ResultCode result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_keys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 memory_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 hit_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 miss_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          miss_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double hit_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          hit_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CacheStatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kuser.CacheStatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  // int64 total_keys = 2;
  if (this->total_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_keys(), target);
  }

  // int64 memory_usage = 3;
  if (this->memory_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_memory_usage(), target);
  }

  // int64 hit_count = 4;
  if (this->hit_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_hit_count(), target);
  }

  // int64 miss_count = 5;
  if (this->miss_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_miss_count(), target);
  }

  // double hit_rate = 6;
  if (!(this->hit_rate() <= 0 && this->hit_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_hit_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kuser.CacheStatsResponse)
  return target;
}

size_t CacheStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kuser.CacheStatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Kuser.ResultCode result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // int64 total_keys = 2;
  if (this->total_keys() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_keys());
  }

  // int64 memory_usage = 3;
  if (this->memory_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_memory_usage());
  }

  // int64 hit_count = 4;
  if (this->hit_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_hit_count());
  }

  // int64 miss_count = 5;
  if (this->miss_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_miss_count());
  }

  // double hit_rate = 6;
  if (!(this->hit_rate() <= 0 && this->hit_rate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CacheStatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kuser.CacheStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CacheStatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CacheStatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kuser.CacheStatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kuser.CacheStatsResponse)
    MergeFrom(*source);
  }
}

void CacheStatsResponse::MergeFrom(const CacheStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kuser.CacheStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    _internal_mutable_result()->::Kuser::ResultCode::MergeFrom(from._internal_result());
  }
  if (from.total_keys() != 0) {
    _internal_set_total_keys(from._internal_total_keys());
  }
  if (from.memory_usage() != 0) {
    _internal_set_memory_usage(from._internal_memory_usage());
  }
  if (from.hit_count() != 0) {
    _internal_set_hit_count(from._internal_hit_count());
  }
  if (from.miss_count() != 0) {
    _internal_set_miss_count(from._internal_miss_count());
  }
  if (!(from.hit_rate() <= 0 && from.hit_rate() >= 0)) {
    _internal_set_hit_rate(from._internal_hit_rate());
  }
}

void CacheStatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kuser.CacheStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheStatsResponse::CopyFrom(const CacheStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kuser.CacheStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheStatsResponse::IsInitialized() const {
  return true;
}

void CacheStatsResponse::InternalSwap(CacheStatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheStatsResponse, hit_rate_)
      + sizeof(CacheStatsResponse::hit_rate_)
      - PROTOBUF_FIELD_OFFSET(CacheStatsResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheStatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UserServiceRpc::~UserServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_user_2eproto);
  return file_level_service_descriptors_user_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* UserServiceRpc::GetDescriptor() {
  return descriptor();
}

void UserServiceRpc::Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::LoginRequest*,
                         ::Kuser::LoginResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Login() not implemented.");
  done->Run();
}

void UserServiceRpc::Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::RegisterRequest*,
                         ::Kuser::RegisterResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Register() not implemented.");
  done->Run();
}

void UserServiceRpc::SumtoN(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::SumToNRequest*,
                         ::Kuser::SumToNResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SumtoN() not implemented.");
  done->Run();
}

void UserServiceRpc::GetUserProfile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::GetUserProfileRequest*,
                         ::Kuser::GetUserProfileResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserProfile() not implemented.");
  done->Run();
}

void UserServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_user_2eproto[0]);
  switch(method->index()) {
    case 0:
      Login(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::LoginRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::LoginResponse*>(
                 response),
             done);
      break;
    case 1:
      Register(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::RegisterRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::RegisterResponse*>(
                 response),
             done);
      break;
    case 2:
      SumtoN(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::SumToNRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::SumToNResponse*>(
                 response),
             done);
      break;
    case 3:
      GetUserProfile(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::GetUserProfileRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::GetUserProfileResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Kuser::LoginRequest::default_instance();
    case 1:
      return ::Kuser::RegisterRequest::default_instance();
    case 2:
      return ::Kuser::SumToNRequest::default_instance();
    case 3:
      return ::Kuser::GetUserProfileRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& UserServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Kuser::LoginResponse::default_instance();
    case 1:
      return ::Kuser::RegisterResponse::default_instance();
    case 2:
      return ::Kuser::SumToNResponse::default_instance();
    case 3:
      return ::Kuser::GetUserProfileResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

UserServiceRpc_Stub::UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UserServiceRpc_Stub::UserServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
UserServiceRpc_Stub::~UserServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void UserServiceRpc_Stub::Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::LoginRequest* request,
                              ::Kuser::LoginResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UserServiceRpc_Stub::Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::RegisterRequest* request,
                              ::Kuser::RegisterResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UserServiceRpc_Stub::SumtoN(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::SumToNRequest* request,
                              ::Kuser::SumToNResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void UserServiceRpc_Stub::GetUserProfile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::GetUserProfileRequest* request,
                              ::Kuser::GetUserProfileResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
// ===================================================================

CacheServiceRpc::~CacheServiceRpc() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CacheServiceRpc::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_user_2eproto);
  return file_level_service_descriptors_user_2eproto[1];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CacheServiceRpc::GetDescriptor() {
  return descriptor();
}

void CacheServiceRpc::Set(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::CacheSetRequest*,
                         ::Kuser::ResultCode*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Set() not implemented.");
  done->Run();
}

void CacheServiceRpc::Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::CacheGetRequest*,
                         ::Kuser::CacheGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Get() not implemented.");
  done->Run();
}

void CacheServiceRpc::Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::CacheDeleteRequest*,
                         ::Kuser::ResultCode*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void CacheServiceRpc::Exists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::CacheExistsRequest*,
                         ::Kuser::CacheExistsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Exists() not implemented.");
  done->Run();
}

void CacheServiceRpc::BatchGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::CacheBatchGetRequest*,
                         ::Kuser::CacheBatchGetResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BatchGet() not implemented.");
  done->Run();
}

void CacheServiceRpc::GetStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::Kuser::CacheStatsRequest*,
                         ::Kuser::CacheStatsResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetStats() not implemented.");
  done->Run();
}

void CacheServiceRpc::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_user_2eproto[1]);
  switch(method->index()) {
    case 0:
      Set(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::CacheSetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::ResultCode*>(
                 response),
             done);
      break;
    case 1:
      Get(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::CacheGetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::CacheGetResponse*>(
                 response),
             done);
      break;
    case 2:
      Delete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::CacheDeleteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::ResultCode*>(
                 response),
             done);
      break;
    case 3:
      Exists(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::CacheExistsRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::CacheExistsResponse*>(
                 response),
             done);
      break;
    case 4:
      BatchGet(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::CacheBatchGetRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::CacheBatchGetResponse*>(
                 response),
             done);
      break;
    case 5:
      GetStats(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::Kuser::CacheStatsRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::Kuser::CacheStatsResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CacheServiceRpc::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Kuser::CacheSetRequest::default_instance();
    case 1:
      return ::Kuser::CacheGetRequest::default_instance();
    case 2:
      return ::Kuser::CacheDeleteRequest::default_instance();
    case 3:
      return ::Kuser::CacheExistsRequest::default_instance();
    case 4:
      return ::Kuser::CacheBatchGetRequest::default_instance();
    case 5:
      return ::Kuser::CacheStatsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CacheServiceRpc::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Kuser::ResultCode::default_instance();
    case 1:
      return ::Kuser::CacheGetResponse::default_instance();
    case 2:
      return ::Kuser::ResultCode::default_instance();
    case 3:
      return ::Kuser::CacheExistsResponse::default_instance();
    case 4:
      return ::Kuser::CacheBatchGetResponse::default_instance();
    case 5:
      return ::Kuser::CacheStatsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CacheServiceRpc_Stub::CacheServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CacheServiceRpc_Stub::CacheServiceRpc_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
CacheServiceRpc_Stub::~CacheServiceRpc_Stub() {
  if (owns_channel_) delete channel_;
}

void CacheServiceRpc_Stub::Set(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::CacheSetRequest* request,
                              ::Kuser::ResultCode* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void CacheServiceRpc_Stub::Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::CacheGetRequest* request,
                              ::Kuser::CacheGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void CacheServiceRpc_Stub::Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::CacheDeleteRequest* request,
                              ::Kuser::ResultCode* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void CacheServiceRpc_Stub::Exists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::CacheExistsRequest* request,
                              ::Kuser::CacheExistsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void CacheServiceRpc_Stub::BatchGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::CacheBatchGetRequest* request,
                              ::Kuser::CacheBatchGetResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void CacheServiceRpc_Stub::GetStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::Kuser::CacheStatsRequest* request,
                              ::Kuser::CacheStatsResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Kuser
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Kuser::ResultCode* Arena::CreateMaybeMessage< ::Kuser::ResultCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::ResultCode >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::LoginRequest* Arena::CreateMaybeMessage< ::Kuser::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::LoginResponse* Arena::CreateMaybeMessage< ::Kuser::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::RegisterRequest* Arena::CreateMaybeMessage< ::Kuser::RegisterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::RegisterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::RegisterResponse* Arena::CreateMaybeMessage< ::Kuser::RegisterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::RegisterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::SumToNRequest* Arena::CreateMaybeMessage< ::Kuser::SumToNRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::SumToNRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::SumToNResponse* Arena::CreateMaybeMessage< ::Kuser::SumToNResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::SumToNResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::GetUserProfileRequest* Arena::CreateMaybeMessage< ::Kuser::GetUserProfileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::GetUserProfileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::GetUserProfileResponse* Arena::CreateMaybeMessage< ::Kuser::GetUserProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::GetUserProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheSetRequest* Arena::CreateMaybeMessage< ::Kuser::CacheSetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheSetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheGetRequest* Arena::CreateMaybeMessage< ::Kuser::CacheGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheGetResponse* Arena::CreateMaybeMessage< ::Kuser::CacheGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheDeleteRequest* Arena::CreateMaybeMessage< ::Kuser::CacheDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheBatchGetRequest* Arena::CreateMaybeMessage< ::Kuser::CacheBatchGetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheBatchGetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheItem* Arena::CreateMaybeMessage< ::Kuser::CacheItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheBatchGetResponse* Arena::CreateMaybeMessage< ::Kuser::CacheBatchGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheBatchGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheExistsRequest* Arena::CreateMaybeMessage< ::Kuser::CacheExistsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheExistsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheExistsResponse* Arena::CreateMaybeMessage< ::Kuser::CacheExistsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheExistsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheStatsRequest* Arena::CreateMaybeMessage< ::Kuser::CacheStatsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::Kuser::CacheStatsResponse* Arena::CreateMaybeMessage< ::Kuser::CacheStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Kuser::CacheStatsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
