// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace Kuser {
class CacheBatchGetRequest;
class CacheBatchGetRequestDefaultTypeInternal;
extern CacheBatchGetRequestDefaultTypeInternal _CacheBatchGetRequest_default_instance_;
class CacheBatchGetResponse;
class CacheBatchGetResponseDefaultTypeInternal;
extern CacheBatchGetResponseDefaultTypeInternal _CacheBatchGetResponse_default_instance_;
class CacheDeleteRequest;
class CacheDeleteRequestDefaultTypeInternal;
extern CacheDeleteRequestDefaultTypeInternal _CacheDeleteRequest_default_instance_;
class CacheExistsRequest;
class CacheExistsRequestDefaultTypeInternal;
extern CacheExistsRequestDefaultTypeInternal _CacheExistsRequest_default_instance_;
class CacheExistsResponse;
class CacheExistsResponseDefaultTypeInternal;
extern CacheExistsResponseDefaultTypeInternal _CacheExistsResponse_default_instance_;
class CacheGetRequest;
class CacheGetRequestDefaultTypeInternal;
extern CacheGetRequestDefaultTypeInternal _CacheGetRequest_default_instance_;
class CacheGetResponse;
class CacheGetResponseDefaultTypeInternal;
extern CacheGetResponseDefaultTypeInternal _CacheGetResponse_default_instance_;
class CacheItem;
class CacheItemDefaultTypeInternal;
extern CacheItemDefaultTypeInternal _CacheItem_default_instance_;
class CacheSetRequest;
class CacheSetRequestDefaultTypeInternal;
extern CacheSetRequestDefaultTypeInternal _CacheSetRequest_default_instance_;
class CacheStatsRequest;
class CacheStatsRequestDefaultTypeInternal;
extern CacheStatsRequestDefaultTypeInternal _CacheStatsRequest_default_instance_;
class CacheStatsResponse;
class CacheStatsResponseDefaultTypeInternal;
extern CacheStatsResponseDefaultTypeInternal _CacheStatsResponse_default_instance_;
class GetUserProfileRequest;
class GetUserProfileRequestDefaultTypeInternal;
extern GetUserProfileRequestDefaultTypeInternal _GetUserProfileRequest_default_instance_;
class GetUserProfileResponse;
class GetUserProfileResponseDefaultTypeInternal;
extern GetUserProfileResponseDefaultTypeInternal _GetUserProfileResponse_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class RegisterRequest;
class RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
class RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class ResultCode;
class ResultCodeDefaultTypeInternal;
extern ResultCodeDefaultTypeInternal _ResultCode_default_instance_;
class SumToNRequest;
class SumToNRequestDefaultTypeInternal;
extern SumToNRequestDefaultTypeInternal _SumToNRequest_default_instance_;
class SumToNResponse;
class SumToNResponseDefaultTypeInternal;
extern SumToNResponseDefaultTypeInternal _SumToNResponse_default_instance_;
}  // namespace Kuser
PROTOBUF_NAMESPACE_OPEN
template<> ::Kuser::CacheBatchGetRequest* Arena::CreateMaybeMessage<::Kuser::CacheBatchGetRequest>(Arena*);
template<> ::Kuser::CacheBatchGetResponse* Arena::CreateMaybeMessage<::Kuser::CacheBatchGetResponse>(Arena*);
template<> ::Kuser::CacheDeleteRequest* Arena::CreateMaybeMessage<::Kuser::CacheDeleteRequest>(Arena*);
template<> ::Kuser::CacheExistsRequest* Arena::CreateMaybeMessage<::Kuser::CacheExistsRequest>(Arena*);
template<> ::Kuser::CacheExistsResponse* Arena::CreateMaybeMessage<::Kuser::CacheExistsResponse>(Arena*);
template<> ::Kuser::CacheGetRequest* Arena::CreateMaybeMessage<::Kuser::CacheGetRequest>(Arena*);
template<> ::Kuser::CacheGetResponse* Arena::CreateMaybeMessage<::Kuser::CacheGetResponse>(Arena*);
template<> ::Kuser::CacheItem* Arena::CreateMaybeMessage<::Kuser::CacheItem>(Arena*);
template<> ::Kuser::CacheSetRequest* Arena::CreateMaybeMessage<::Kuser::CacheSetRequest>(Arena*);
template<> ::Kuser::CacheStatsRequest* Arena::CreateMaybeMessage<::Kuser::CacheStatsRequest>(Arena*);
template<> ::Kuser::CacheStatsResponse* Arena::CreateMaybeMessage<::Kuser::CacheStatsResponse>(Arena*);
template<> ::Kuser::GetUserProfileRequest* Arena::CreateMaybeMessage<::Kuser::GetUserProfileRequest>(Arena*);
template<> ::Kuser::GetUserProfileResponse* Arena::CreateMaybeMessage<::Kuser::GetUserProfileResponse>(Arena*);
template<> ::Kuser::LoginRequest* Arena::CreateMaybeMessage<::Kuser::LoginRequest>(Arena*);
template<> ::Kuser::LoginResponse* Arena::CreateMaybeMessage<::Kuser::LoginResponse>(Arena*);
template<> ::Kuser::RegisterRequest* Arena::CreateMaybeMessage<::Kuser::RegisterRequest>(Arena*);
template<> ::Kuser::RegisterResponse* Arena::CreateMaybeMessage<::Kuser::RegisterResponse>(Arena*);
template<> ::Kuser::ResultCode* Arena::CreateMaybeMessage<::Kuser::ResultCode>(Arena*);
template<> ::Kuser::SumToNRequest* Arena::CreateMaybeMessage<::Kuser::SumToNRequest>(Arena*);
template<> ::Kuser::SumToNResponse* Arena::CreateMaybeMessage<::Kuser::SumToNResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Kuser {

// ===================================================================

class ResultCode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.ResultCode) */ {
 public:
  inline ResultCode() : ResultCode(nullptr) {};
  virtual ~ResultCode();

  ResultCode(const ResultCode& from);
  ResultCode(ResultCode&& from) noexcept
    : ResultCode() {
    *this = ::std::move(from);
  }

  inline ResultCode& operator=(const ResultCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultCode& operator=(ResultCode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultCode* internal_default_instance() {
    return reinterpret_cast<const ResultCode*>(
               &_ResultCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultCode& a, ResultCode& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultCode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultCode* New() const final {
    return CreateMaybeMessage<ResultCode>(nullptr);
  }

  ResultCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultCode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultCode& from);
  void MergeFrom(const ResultCode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultCode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.ResultCode";
  }
  protected:
  explicit ResultCode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 2,
    kErrcodeFieldNumber = 1,
  };
  // bytes errmsg = 2;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_errmsg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_errmsg(
      std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // int32 errcode = 1;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.ResultCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {};
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes pwd = 2;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pwd();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd(
      std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:Kuser.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {};
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(nullptr);
  }

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .Kuser.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Kuser::ResultCode& result() const;
  ::Kuser::ResultCode* release_result();
  ::Kuser::ResultCode* mutable_result();
  void set_allocated_result(::Kuser::ResultCode* result);
  private:
  const ::Kuser::ResultCode& _internal_result() const;
  ::Kuser::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Kuser::ResultCode* result);
  ::Kuser::ResultCode* unsafe_arena_release_result();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Kuser::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {};
  virtual ~RegisterRequest();

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRequest* New() const final {
    return CreateMaybeMessage<RegisterRequest>(nullptr);
  }

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRequest& from);
  void MergeFrom(const RegisterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPwdFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes pwd = 3;
  void clear_pwd();
  const std::string& pwd() const;
  void set_pwd(const std::string& value);
  void set_pwd(std::string&& value);
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  std::string* mutable_pwd();
  std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pwd();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pwd(
      std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class RegisterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.RegisterResponse) */ {
 public:
  inline RegisterResponse() : RegisterResponse(nullptr) {};
  virtual ~RegisterResponse();

  RegisterResponse(const RegisterResponse& from);
  RegisterResponse(RegisterResponse&& from) noexcept
    : RegisterResponse() {
    *this = ::std::move(from);
  }

  inline RegisterResponse& operator=(const RegisterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterResponse& operator=(RegisterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterResponse*>(
               &_RegisterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterResponse& a, RegisterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterResponse* New() const final {
    return CreateMaybeMessage<RegisterResponse>(nullptr);
  }

  RegisterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterResponse& from);
  void MergeFrom(const RegisterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.RegisterResponse";
  }
  protected:
  explicit RegisterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // .Kuser.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Kuser::ResultCode& result() const;
  ::Kuser::ResultCode* release_result();
  ::Kuser::ResultCode* mutable_result();
  void set_allocated_result(::Kuser::ResultCode* result);
  private:
  const ::Kuser::ResultCode& _internal_result() const;
  ::Kuser::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Kuser::ResultCode* result);
  ::Kuser::ResultCode* unsafe_arena_release_result();

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.RegisterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Kuser::ResultCode* result_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SumToNRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.SumToNRequest) */ {
 public:
  inline SumToNRequest() : SumToNRequest(nullptr) {};
  virtual ~SumToNRequest();

  SumToNRequest(const SumToNRequest& from);
  SumToNRequest(SumToNRequest&& from) noexcept
    : SumToNRequest() {
    *this = ::std::move(from);
  }

  inline SumToNRequest& operator=(const SumToNRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SumToNRequest& operator=(SumToNRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SumToNRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SumToNRequest* internal_default_instance() {
    return reinterpret_cast<const SumToNRequest*>(
               &_SumToNRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SumToNRequest& a, SumToNRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SumToNRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SumToNRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SumToNRequest* New() const final {
    return CreateMaybeMessage<SumToNRequest>(nullptr);
  }

  SumToNRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SumToNRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SumToNRequest& from);
  void MergeFrom(const SumToNRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SumToNRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.SumToNRequest";
  }
  protected:
  explicit SumToNRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
  };
  // int32 n = 1;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::int32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.SumToNRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class SumToNResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.SumToNResponse) */ {
 public:
  inline SumToNResponse() : SumToNResponse(nullptr) {};
  virtual ~SumToNResponse();

  SumToNResponse(const SumToNResponse& from);
  SumToNResponse(SumToNResponse&& from) noexcept
    : SumToNResponse() {
    *this = ::std::move(from);
  }

  inline SumToNResponse& operator=(const SumToNResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SumToNResponse& operator=(SumToNResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SumToNResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SumToNResponse* internal_default_instance() {
    return reinterpret_cast<const SumToNResponse*>(
               &_SumToNResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SumToNResponse& a, SumToNResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SumToNResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SumToNResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SumToNResponse* New() const final {
    return CreateMaybeMessage<SumToNResponse>(nullptr);
  }

  SumToNResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SumToNResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SumToNResponse& from);
  void MergeFrom(const SumToNResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SumToNResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.SumToNResponse";
  }
  protected:
  explicit SumToNResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSumFieldNumber = 2,
  };
  // .Kuser.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Kuser::ResultCode& result() const;
  ::Kuser::ResultCode* release_result();
  ::Kuser::ResultCode* mutable_result();
  void set_allocated_result(::Kuser::ResultCode* result);
  private:
  const ::Kuser::ResultCode& _internal_result() const;
  ::Kuser::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Kuser::ResultCode* result);
  ::Kuser::ResultCode* unsafe_arena_release_result();

  // int32 sum = 2;
  void clear_sum();
  ::PROTOBUF_NAMESPACE_ID::int32 sum() const;
  void set_sum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sum() const;
  void _internal_set_sum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.SumToNResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Kuser::ResultCode* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserProfileRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.GetUserProfileRequest) */ {
 public:
  inline GetUserProfileRequest() : GetUserProfileRequest(nullptr) {};
  virtual ~GetUserProfileRequest();

  GetUserProfileRequest(const GetUserProfileRequest& from);
  GetUserProfileRequest(GetUserProfileRequest&& from) noexcept
    : GetUserProfileRequest() {
    *this = ::std::move(from);
  }

  inline GetUserProfileRequest& operator=(const GetUserProfileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserProfileRequest& operator=(GetUserProfileRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserProfileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserProfileRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserProfileRequest*>(
               &_GetUserProfileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetUserProfileRequest& a, GetUserProfileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserProfileRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserProfileRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserProfileRequest* New() const final {
    return CreateMaybeMessage<GetUserProfileRequest>(nullptr);
  }

  GetUserProfileRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserProfileRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserProfileRequest& from);
  void MergeFrom(const GetUserProfileRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserProfileRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.GetUserProfileRequest";
  }
  protected:
  explicit GetUserProfileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
  };
  // uint32 user_id = 1;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.GetUserProfileRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetUserProfileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.GetUserProfileResponse) */ {
 public:
  inline GetUserProfileResponse() : GetUserProfileResponse(nullptr) {};
  virtual ~GetUserProfileResponse();

  GetUserProfileResponse(const GetUserProfileResponse& from);
  GetUserProfileResponse(GetUserProfileResponse&& from) noexcept
    : GetUserProfileResponse() {
    *this = ::std::move(from);
  }

  inline GetUserProfileResponse& operator=(const GetUserProfileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserProfileResponse& operator=(GetUserProfileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetUserProfileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetUserProfileResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserProfileResponse*>(
               &_GetUserProfileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetUserProfileResponse& a, GetUserProfileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserProfileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserProfileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetUserProfileResponse* New() const final {
    return CreateMaybeMessage<GetUserProfileResponse>(nullptr);
  }

  GetUserProfileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetUserProfileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetUserProfileResponse& from);
  void MergeFrom(const GetUserProfileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserProfileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.GetUserProfileResponse";
  }
  protected:
  explicit GetUserProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileDataFieldNumber = 2,
    kResultFieldNumber = 1,
    kFromCacheFieldNumber = 3,
  };
  // bytes profile_data = 2;
  void clear_profile_data();
  const std::string& profile_data() const;
  void set_profile_data(const std::string& value);
  void set_profile_data(std::string&& value);
  void set_profile_data(const char* value);
  void set_profile_data(const void* value, size_t size);
  std::string* mutable_profile_data();
  std::string* release_profile_data();
  void set_allocated_profile_data(std::string* profile_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_profile_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_profile_data(
      std::string* profile_data);
  private:
  const std::string& _internal_profile_data() const;
  void _internal_set_profile_data(const std::string& value);
  std::string* _internal_mutable_profile_data();
  public:

  // .Kuser.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Kuser::ResultCode& result() const;
  ::Kuser::ResultCode* release_result();
  ::Kuser::ResultCode* mutable_result();
  void set_allocated_result(::Kuser::ResultCode* result);
  private:
  const ::Kuser::ResultCode& _internal_result() const;
  ::Kuser::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Kuser::ResultCode* result);
  ::Kuser::ResultCode* unsafe_arena_release_result();

  // bool from_cache = 3;
  void clear_from_cache();
  bool from_cache() const;
  void set_from_cache(bool value);
  private:
  bool _internal_from_cache() const;
  void _internal_set_from_cache(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.GetUserProfileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_data_;
  ::Kuser::ResultCode* result_;
  bool from_cache_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheSetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheSetRequest) */ {
 public:
  inline CacheSetRequest() : CacheSetRequest(nullptr) {};
  virtual ~CacheSetRequest();

  CacheSetRequest(const CacheSetRequest& from);
  CacheSetRequest(CacheSetRequest&& from) noexcept
    : CacheSetRequest() {
    *this = ::std::move(from);
  }

  inline CacheSetRequest& operator=(const CacheSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheSetRequest& operator=(CacheSetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheSetRequest* internal_default_instance() {
    return reinterpret_cast<const CacheSetRequest*>(
               &_CacheSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CacheSetRequest& a, CacheSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheSetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheSetRequest* New() const final {
    return CreateMaybeMessage<CacheSetRequest>(nullptr);
  }

  CacheSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheSetRequest& from);
  void MergeFrom(const CacheSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheSetRequest";
  }
  protected:
  explicit CacheSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kExpireSecondsFieldNumber = 3,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 expire_seconds = 3;
  void clear_expire_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 expire_seconds() const;
  void set_expire_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expire_seconds() const;
  void _internal_set_expire_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::int32 expire_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheGetRequest) */ {
 public:
  inline CacheGetRequest() : CacheGetRequest(nullptr) {};
  virtual ~CacheGetRequest();

  CacheGetRequest(const CacheGetRequest& from);
  CacheGetRequest(CacheGetRequest&& from) noexcept
    : CacheGetRequest() {
    *this = ::std::move(from);
  }

  inline CacheGetRequest& operator=(const CacheGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheGetRequest& operator=(CacheGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheGetRequest* internal_default_instance() {
    return reinterpret_cast<const CacheGetRequest*>(
               &_CacheGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CacheGetRequest& a, CacheGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheGetRequest* New() const final {
    return CreateMaybeMessage<CacheGetRequest>(nullptr);
  }

  CacheGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheGetRequest& from);
  void MergeFrom(const CacheGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheGetRequest";
  }
  protected:
  explicit CacheGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheGetResponse) */ {
 public:
  inline CacheGetResponse() : CacheGetResponse(nullptr) {};
  virtual ~CacheGetResponse();

  CacheGetResponse(const CacheGetResponse& from);
  CacheGetResponse(CacheGetResponse&& from) noexcept
    : CacheGetResponse() {
    *this = ::std::move(from);
  }

  inline CacheGetResponse& operator=(const CacheGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheGetResponse& operator=(CacheGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheGetResponse* internal_default_instance() {
    return reinterpret_cast<const CacheGetResponse*>(
               &_CacheGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CacheGetResponse& a, CacheGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheGetResponse* New() const final {
    return CreateMaybeMessage<CacheGetResponse>(nullptr);
  }

  CacheGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheGetResponse& from);
  void MergeFrom(const CacheGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheGetResponse";
  }
  protected:
  explicit CacheGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kResultFieldNumber = 1,
    kExpireTimeFieldNumber = 4,
    kExistsFieldNumber = 3,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .Kuser.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Kuser::ResultCode& result() const;
  ::Kuser::ResultCode* release_result();
  ::Kuser::ResultCode* mutable_result();
  void set_allocated_result(::Kuser::ResultCode* result);
  private:
  const ::Kuser::ResultCode& _internal_result() const;
  ::Kuser::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Kuser::ResultCode* result);
  ::Kuser::ResultCode* unsafe_arena_release_result();

  // int64 expire_time = 4;
  void clear_expire_time();
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time() const;
  void set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expire_time() const;
  void _internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool exists = 3;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::Kuser::ResultCode* result_;
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time_;
  bool exists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheDeleteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheDeleteRequest) */ {
 public:
  inline CacheDeleteRequest() : CacheDeleteRequest(nullptr) {};
  virtual ~CacheDeleteRequest();

  CacheDeleteRequest(const CacheDeleteRequest& from);
  CacheDeleteRequest(CacheDeleteRequest&& from) noexcept
    : CacheDeleteRequest() {
    *this = ::std::move(from);
  }

  inline CacheDeleteRequest& operator=(const CacheDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheDeleteRequest& operator=(CacheDeleteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheDeleteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const CacheDeleteRequest*>(
               &_CacheDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CacheDeleteRequest& a, CacheDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheDeleteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheDeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheDeleteRequest* New() const final {
    return CreateMaybeMessage<CacheDeleteRequest>(nullptr);
  }

  CacheDeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheDeleteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheDeleteRequest& from);
  void MergeFrom(const CacheDeleteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheDeleteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheDeleteRequest";
  }
  protected:
  explicit CacheDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheDeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheBatchGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheBatchGetRequest) */ {
 public:
  inline CacheBatchGetRequest() : CacheBatchGetRequest(nullptr) {};
  virtual ~CacheBatchGetRequest();

  CacheBatchGetRequest(const CacheBatchGetRequest& from);
  CacheBatchGetRequest(CacheBatchGetRequest&& from) noexcept
    : CacheBatchGetRequest() {
    *this = ::std::move(from);
  }

  inline CacheBatchGetRequest& operator=(const CacheBatchGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheBatchGetRequest& operator=(CacheBatchGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheBatchGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheBatchGetRequest* internal_default_instance() {
    return reinterpret_cast<const CacheBatchGetRequest*>(
               &_CacheBatchGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CacheBatchGetRequest& a, CacheBatchGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheBatchGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheBatchGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheBatchGetRequest* New() const final {
    return CreateMaybeMessage<CacheBatchGetRequest>(nullptr);
  }

  CacheBatchGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheBatchGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheBatchGetRequest& from);
  void MergeFrom(const CacheBatchGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheBatchGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheBatchGetRequest";
  }
  protected:
  explicit CacheBatchGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated bytes keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  const std::string& keys(int index) const;
  std::string* mutable_keys(int index);
  void set_keys(int index, const std::string& value);
  void set_keys(int index, std::string&& value);
  void set_keys(int index, const char* value);
  void set_keys(int index, const void* value, size_t size);
  std::string* add_keys();
  void add_keys(const std::string& value);
  void add_keys(std::string&& value);
  void add_keys(const char* value);
  void add_keys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_keys();
  private:
  const std::string& _internal_keys(int index) const;
  std::string* _internal_add_keys();
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheBatchGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheItem) */ {
 public:
  inline CacheItem() : CacheItem(nullptr) {};
  virtual ~CacheItem();

  CacheItem(const CacheItem& from);
  CacheItem(CacheItem&& from) noexcept
    : CacheItem() {
    *this = ::std::move(from);
  }

  inline CacheItem& operator=(const CacheItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheItem& operator=(CacheItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheItem* internal_default_instance() {
    return reinterpret_cast<const CacheItem*>(
               &_CacheItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CacheItem& a, CacheItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheItem* New() const final {
    return CreateMaybeMessage<CacheItem>(nullptr);
  }

  CacheItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheItem& from);
  void MergeFrom(const CacheItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheItem";
  }
  protected:
  explicit CacheItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kExistsFieldNumber = 3,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool exists = 3;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool exists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheBatchGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheBatchGetResponse) */ {
 public:
  inline CacheBatchGetResponse() : CacheBatchGetResponse(nullptr) {};
  virtual ~CacheBatchGetResponse();

  CacheBatchGetResponse(const CacheBatchGetResponse& from);
  CacheBatchGetResponse(CacheBatchGetResponse&& from) noexcept
    : CacheBatchGetResponse() {
    *this = ::std::move(from);
  }

  inline CacheBatchGetResponse& operator=(const CacheBatchGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheBatchGetResponse& operator=(CacheBatchGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheBatchGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheBatchGetResponse* internal_default_instance() {
    return reinterpret_cast<const CacheBatchGetResponse*>(
               &_CacheBatchGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CacheBatchGetResponse& a, CacheBatchGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheBatchGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheBatchGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheBatchGetResponse* New() const final {
    return CreateMaybeMessage<CacheBatchGetResponse>(nullptr);
  }

  CacheBatchGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheBatchGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheBatchGetResponse& from);
  void MergeFrom(const CacheBatchGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheBatchGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheBatchGetResponse";
  }
  protected:
  explicit CacheBatchGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .Kuser.CacheItem items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Kuser::CacheItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Kuser::CacheItem >*
      mutable_items();
  private:
  const ::Kuser::CacheItem& _internal_items(int index) const;
  ::Kuser::CacheItem* _internal_add_items();
  public:
  const ::Kuser::CacheItem& items(int index) const;
  ::Kuser::CacheItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Kuser::CacheItem >&
      items() const;

  // .Kuser.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Kuser::ResultCode& result() const;
  ::Kuser::ResultCode* release_result();
  ::Kuser::ResultCode* mutable_result();
  void set_allocated_result(::Kuser::ResultCode* result);
  private:
  const ::Kuser::ResultCode& _internal_result() const;
  ::Kuser::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Kuser::ResultCode* result);
  ::Kuser::ResultCode* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:Kuser.CacheBatchGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Kuser::CacheItem > items_;
  ::Kuser::ResultCode* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheExistsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheExistsRequest) */ {
 public:
  inline CacheExistsRequest() : CacheExistsRequest(nullptr) {};
  virtual ~CacheExistsRequest();

  CacheExistsRequest(const CacheExistsRequest& from);
  CacheExistsRequest(CacheExistsRequest&& from) noexcept
    : CacheExistsRequest() {
    *this = ::std::move(from);
  }

  inline CacheExistsRequest& operator=(const CacheExistsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheExistsRequest& operator=(CacheExistsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheExistsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheExistsRequest* internal_default_instance() {
    return reinterpret_cast<const CacheExistsRequest*>(
               &_CacheExistsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CacheExistsRequest& a, CacheExistsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheExistsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheExistsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheExistsRequest* New() const final {
    return CreateMaybeMessage<CacheExistsRequest>(nullptr);
  }

  CacheExistsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheExistsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheExistsRequest& from);
  void MergeFrom(const CacheExistsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheExistsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheExistsRequest";
  }
  protected:
  explicit CacheExistsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheExistsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheExistsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheExistsResponse) */ {
 public:
  inline CacheExistsResponse() : CacheExistsResponse(nullptr) {};
  virtual ~CacheExistsResponse();

  CacheExistsResponse(const CacheExistsResponse& from);
  CacheExistsResponse(CacheExistsResponse&& from) noexcept
    : CacheExistsResponse() {
    *this = ::std::move(from);
  }

  inline CacheExistsResponse& operator=(const CacheExistsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheExistsResponse& operator=(CacheExistsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheExistsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheExistsResponse* internal_default_instance() {
    return reinterpret_cast<const CacheExistsResponse*>(
               &_CacheExistsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CacheExistsResponse& a, CacheExistsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheExistsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheExistsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheExistsResponse* New() const final {
    return CreateMaybeMessage<CacheExistsResponse>(nullptr);
  }

  CacheExistsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheExistsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheExistsResponse& from);
  void MergeFrom(const CacheExistsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheExistsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheExistsResponse";
  }
  protected:
  explicit CacheExistsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kExistsFieldNumber = 2,
  };
  // .Kuser.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Kuser::ResultCode& result() const;
  ::Kuser::ResultCode* release_result();
  ::Kuser::ResultCode* mutable_result();
  void set_allocated_result(::Kuser::ResultCode* result);
  private:
  const ::Kuser::ResultCode& _internal_result() const;
  ::Kuser::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Kuser::ResultCode* result);
  ::Kuser::ResultCode* unsafe_arena_release_result();

  // bool exists = 2;
  void clear_exists();
  bool exists() const;
  void set_exists(bool value);
  private:
  bool _internal_exists() const;
  void _internal_set_exists(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheExistsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Kuser::ResultCode* result_;
  bool exists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheStatsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheStatsRequest) */ {
 public:
  inline CacheStatsRequest() : CacheStatsRequest(nullptr) {};
  virtual ~CacheStatsRequest();

  CacheStatsRequest(const CacheStatsRequest& from);
  CacheStatsRequest(CacheStatsRequest&& from) noexcept
    : CacheStatsRequest() {
    *this = ::std::move(from);
  }

  inline CacheStatsRequest& operator=(const CacheStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheStatsRequest& operator=(CacheStatsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheStatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheStatsRequest* internal_default_instance() {
    return reinterpret_cast<const CacheStatsRequest*>(
               &_CacheStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CacheStatsRequest& a, CacheStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheStatsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheStatsRequest* New() const final {
    return CreateMaybeMessage<CacheStatsRequest>(nullptr);
  }

  CacheStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheStatsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheStatsRequest& from);
  void MergeFrom(const CacheStatsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheStatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheStatsRequest";
  }
  protected:
  explicit CacheStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Kuser.CacheStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CacheStatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Kuser.CacheStatsResponse) */ {
 public:
  inline CacheStatsResponse() : CacheStatsResponse(nullptr) {};
  virtual ~CacheStatsResponse();

  CacheStatsResponse(const CacheStatsResponse& from);
  CacheStatsResponse(CacheStatsResponse&& from) noexcept
    : CacheStatsResponse() {
    *this = ::std::move(from);
  }

  inline CacheStatsResponse& operator=(const CacheStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheStatsResponse& operator=(CacheStatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CacheStatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CacheStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CacheStatsResponse*>(
               &_CacheStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CacheStatsResponse& a, CacheStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CacheStatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CacheStatsResponse* New() const final {
    return CreateMaybeMessage<CacheStatsResponse>(nullptr);
  }

  CacheStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CacheStatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CacheStatsResponse& from);
  void MergeFrom(const CacheStatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CacheStatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Kuser.CacheStatsResponse";
  }
  protected:
  explicit CacheStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_user_2eproto);
    return ::descriptor_table_user_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kTotalKeysFieldNumber = 2,
    kMemoryUsageFieldNumber = 3,
    kHitCountFieldNumber = 4,
    kMissCountFieldNumber = 5,
    kHitRateFieldNumber = 6,
  };
  // .Kuser.ResultCode result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::Kuser::ResultCode& result() const;
  ::Kuser::ResultCode* release_result();
  ::Kuser::ResultCode* mutable_result();
  void set_allocated_result(::Kuser::ResultCode* result);
  private:
  const ::Kuser::ResultCode& _internal_result() const;
  ::Kuser::ResultCode* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::Kuser::ResultCode* result);
  ::Kuser::ResultCode* unsafe_arena_release_result();

  // int64 total_keys = 2;
  void clear_total_keys();
  ::PROTOBUF_NAMESPACE_ID::int64 total_keys() const;
  void set_total_keys(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_keys() const;
  void _internal_set_total_keys(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 memory_usage = 3;
  void clear_memory_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 memory_usage() const;
  void set_memory_usage(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_memory_usage() const;
  void _internal_set_memory_usage(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 hit_count = 4;
  void clear_hit_count();
  ::PROTOBUF_NAMESPACE_ID::int64 hit_count() const;
  void set_hit_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hit_count() const;
  void _internal_set_hit_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 miss_count = 5;
  void clear_miss_count();
  ::PROTOBUF_NAMESPACE_ID::int64 miss_count() const;
  void set_miss_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_miss_count() const;
  void _internal_set_miss_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double hit_rate = 6;
  void clear_hit_rate();
  double hit_rate() const;
  void set_hit_rate(double value);
  private:
  double _internal_hit_rate() const;
  void _internal_set_hit_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:Kuser.CacheStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Kuser::ResultCode* result_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_keys_;
  ::PROTOBUF_NAMESPACE_ID::int64 memory_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 hit_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 miss_count_;
  double hit_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::LoginRequest* request,
                       ::Kuser::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::RegisterRequest* request,
                       ::Kuser::RegisterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SumtoN(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::SumToNRequest* request,
                       ::Kuser::SumToNResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserProfile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::GetUserProfileRequest* request,
                       ::Kuser::GetUserProfileResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  UserServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::LoginRequest* request,
                       ::Kuser::LoginResponse* response,
                       ::google::protobuf::Closure* done);
  void Register(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::RegisterRequest* request,
                       ::Kuser::RegisterResponse* response,
                       ::google::protobuf::Closure* done);
  void SumtoN(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::SumToNRequest* request,
                       ::Kuser::SumToNResponse* response,
                       ::google::protobuf::Closure* done);
  void GetUserProfile(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::GetUserProfileRequest* request,
                       ::Kuser::GetUserProfileResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// -------------------------------------------------------------------

class CacheServiceRpc_Stub;

class CacheServiceRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CacheServiceRpc() {};
 public:
  virtual ~CacheServiceRpc();

  typedef CacheServiceRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Set(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheSetRequest* request,
                       ::Kuser::ResultCode* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheGetRequest* request,
                       ::Kuser::CacheGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheDeleteRequest* request,
                       ::Kuser::ResultCode* response,
                       ::google::protobuf::Closure* done);
  virtual void Exists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheExistsRequest* request,
                       ::Kuser::CacheExistsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void BatchGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheBatchGetRequest* request,
                       ::Kuser::CacheBatchGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheStatsRequest* request,
                       ::Kuser::CacheStatsResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CacheServiceRpc);
};

class CacheServiceRpc_Stub : public CacheServiceRpc {
 public:
  CacheServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CacheServiceRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CacheServiceRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CacheServiceRpc ------------------------------------------

  void Set(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheSetRequest* request,
                       ::Kuser::ResultCode* response,
                       ::google::protobuf::Closure* done);
  void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheGetRequest* request,
                       ::Kuser::CacheGetResponse* response,
                       ::google::protobuf::Closure* done);
  void Delete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheDeleteRequest* request,
                       ::Kuser::ResultCode* response,
                       ::google::protobuf::Closure* done);
  void Exists(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheExistsRequest* request,
                       ::Kuser::CacheExistsResponse* response,
                       ::google::protobuf::Closure* done);
  void BatchGet(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheBatchGetRequest* request,
                       ::Kuser::CacheBatchGetResponse* response,
                       ::google::protobuf::Closure* done);
  void GetStats(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::Kuser::CacheStatsRequest* request,
                       ::Kuser::CacheStatsResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CacheServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultCode

// int32 errcode = 1;
inline void ResultCode::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResultCode::errcode() const {
  // @@protoc_insertion_point(field_get:Kuser.ResultCode.errcode)
  return _internal_errcode();
}
inline void ResultCode::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void ResultCode::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:Kuser.ResultCode.errcode)
}

// bytes errmsg = 2;
inline void ResultCode::clear_errmsg() {
  errmsg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResultCode::errmsg() const {
  // @@protoc_insertion_point(field_get:Kuser.ResultCode.errmsg)
  return _internal_errmsg();
}
inline void ResultCode::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:Kuser.ResultCode.errmsg)
}
inline std::string* ResultCode::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:Kuser.ResultCode.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& ResultCode::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void ResultCode::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResultCode::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.ResultCode.errmsg)
}
inline void ResultCode::set_errmsg(const void* value,
    size_t size) {
  
  errmsg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.ResultCode.errmsg)
}
inline std::string* ResultCode::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResultCode::release_errmsg() {
  // @@protoc_insertion_point(field_release:Kuser.ResultCode.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultCode::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.ResultCode.errmsg)
}
inline std::string* ResultCode::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.ResultCode.errmsg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return errmsg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResultCode::unsafe_arena_set_allocated_errmsg(
    std::string* errmsg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      errmsg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.ResultCode.errmsg)
}

// -------------------------------------------------------------------

// LoginRequest

// bytes name = 1;
inline void LoginRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::name() const {
  // @@protoc_insertion_point(field_get:Kuser.LoginRequest.name)
  return _internal_name();
}
inline void LoginRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Kuser.LoginRequest.name)
}
inline std::string* LoginRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Kuser.LoginRequest.name)
  return _internal_mutable_name();
}
inline const std::string& LoginRequest::_internal_name() const {
  return name_.Get();
}
inline void LoginRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.LoginRequest.name)
}
inline void LoginRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.LoginRequest.name)
}
inline void LoginRequest::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.LoginRequest.name)
}
inline std::string* LoginRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_name() {
  // @@protoc_insertion_point(field_release:Kuser.LoginRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.LoginRequest.name)
}
inline std::string* LoginRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.LoginRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.LoginRequest.name)
}

// bytes pwd = 2;
inline void LoginRequest::clear_pwd() {
  pwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LoginRequest::pwd() const {
  // @@protoc_insertion_point(field_get:Kuser.LoginRequest.pwd)
  return _internal_pwd();
}
inline void LoginRequest::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:Kuser.LoginRequest.pwd)
}
inline std::string* LoginRequest::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:Kuser.LoginRequest.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& LoginRequest::_internal_pwd() const {
  return pwd_.Get();
}
inline void LoginRequest::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LoginRequest::set_pwd(std::string&& value) {
  
  pwd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.LoginRequest.pwd)
}
inline void LoginRequest::set_pwd(const void* value,
    size_t size) {
  
  pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.LoginRequest.pwd)
}
inline std::string* LoginRequest::_internal_mutable_pwd() {
  
  return pwd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LoginRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:Kuser.LoginRequest.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.LoginRequest.pwd)
}
inline std::string* LoginRequest::unsafe_arena_release_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.LoginRequest.pwd)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pwd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LoginRequest::unsafe_arena_set_allocated_pwd(
    std::string* pwd) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pwd, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.LoginRequest.pwd)
}

// -------------------------------------------------------------------

// LoginResponse

// .Kuser.ResultCode result = 1;
inline bool LoginResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool LoginResponse::has_result() const {
  return _internal_has_result();
}
inline void LoginResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Kuser::ResultCode& LoginResponse::_internal_result() const {
  const ::Kuser::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kuser::ResultCode*>(
      &::Kuser::_ResultCode_default_instance_);
}
inline const ::Kuser::ResultCode& LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:Kuser.LoginResponse.result)
  return _internal_result();
}
inline void LoginResponse::unsafe_arena_set_allocated_result(
    ::Kuser::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.LoginResponse.result)
}
inline ::Kuser::ResultCode* LoginResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kuser::ResultCode* LoginResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Kuser.LoginResponse.result)
  
  ::Kuser::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Kuser::ResultCode* LoginResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kuser::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::Kuser::ResultCode* LoginResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Kuser.LoginResponse.result)
  return _internal_mutable_result();
}
inline void LoginResponse::set_allocated_result(::Kuser::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Kuser.LoginResponse.result)
}

// bool success = 2;
inline void LoginResponse::clear_success() {
  success_ = false;
}
inline bool LoginResponse::_internal_success() const {
  return success_;
}
inline bool LoginResponse::success() const {
  // @@protoc_insertion_point(field_get:Kuser.LoginResponse.success)
  return _internal_success();
}
inline void LoginResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LoginResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Kuser.LoginResponse.success)
}

// -------------------------------------------------------------------

// RegisterRequest

// uint32 id = 1;
inline void RegisterRequest::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RegisterRequest::id() const {
  // @@protoc_insertion_point(field_get:Kuser.RegisterRequest.id)
  return _internal_id();
}
inline void RegisterRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void RegisterRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Kuser.RegisterRequest.id)
}

// bytes name = 2;
inline void RegisterRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::name() const {
  // @@protoc_insertion_point(field_get:Kuser.RegisterRequest.name)
  return _internal_name();
}
inline void RegisterRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Kuser.RegisterRequest.name)
}
inline std::string* RegisterRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Kuser.RegisterRequest.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterRequest::_internal_name() const {
  return name_.Get();
}
inline void RegisterRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.RegisterRequest.name)
}
inline void RegisterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.RegisterRequest.name)
}
inline void RegisterRequest::set_name(const void* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.RegisterRequest.name)
}
inline std::string* RegisterRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_name() {
  // @@protoc_insertion_point(field_release:Kuser.RegisterRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.RegisterRequest.name)
}
inline std::string* RegisterRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.RegisterRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.RegisterRequest.name)
}

// bytes pwd = 3;
inline void RegisterRequest::clear_pwd() {
  pwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterRequest::pwd() const {
  // @@protoc_insertion_point(field_get:Kuser.RegisterRequest.pwd)
  return _internal_pwd();
}
inline void RegisterRequest::set_pwd(const std::string& value) {
  _internal_set_pwd(value);
  // @@protoc_insertion_point(field_set:Kuser.RegisterRequest.pwd)
}
inline std::string* RegisterRequest::mutable_pwd() {
  // @@protoc_insertion_point(field_mutable:Kuser.RegisterRequest.pwd)
  return _internal_mutable_pwd();
}
inline const std::string& RegisterRequest::_internal_pwd() const {
  return pwd_.Get();
}
inline void RegisterRequest::_internal_set_pwd(const std::string& value) {
  
  pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterRequest::set_pwd(std::string&& value) {
  
  pwd_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.RegisterRequest.pwd)
}
inline void RegisterRequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.RegisterRequest.pwd)
}
inline void RegisterRequest::set_pwd(const void* value,
    size_t size) {
  
  pwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.RegisterRequest.pwd)
}
inline std::string* RegisterRequest::_internal_mutable_pwd() {
  
  return pwd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterRequest::release_pwd() {
  // @@protoc_insertion_point(field_release:Kuser.RegisterRequest.pwd)
  return pwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterRequest::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pwd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.RegisterRequest.pwd)
}
inline std::string* RegisterRequest::unsafe_arena_release_pwd() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.RegisterRequest.pwd)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pwd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RegisterRequest::unsafe_arena_set_allocated_pwd(
    std::string* pwd) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pwd != nullptr) {
    
  } else {
    
  }
  pwd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pwd, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.RegisterRequest.pwd)
}

// -------------------------------------------------------------------

// RegisterResponse

// .Kuser.ResultCode result = 1;
inline bool RegisterResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool RegisterResponse::has_result() const {
  return _internal_has_result();
}
inline void RegisterResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Kuser::ResultCode& RegisterResponse::_internal_result() const {
  const ::Kuser::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kuser::ResultCode*>(
      &::Kuser::_ResultCode_default_instance_);
}
inline const ::Kuser::ResultCode& RegisterResponse::result() const {
  // @@protoc_insertion_point(field_get:Kuser.RegisterResponse.result)
  return _internal_result();
}
inline void RegisterResponse::unsafe_arena_set_allocated_result(
    ::Kuser::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.RegisterResponse.result)
}
inline ::Kuser::ResultCode* RegisterResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kuser::ResultCode* RegisterResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Kuser.RegisterResponse.result)
  
  ::Kuser::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Kuser::ResultCode* RegisterResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kuser::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::Kuser::ResultCode* RegisterResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Kuser.RegisterResponse.result)
  return _internal_mutable_result();
}
inline void RegisterResponse::set_allocated_result(::Kuser::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Kuser.RegisterResponse.result)
}

// bool success = 2;
inline void RegisterResponse::clear_success() {
  success_ = false;
}
inline bool RegisterResponse::_internal_success() const {
  return success_;
}
inline bool RegisterResponse::success() const {
  // @@protoc_insertion_point(field_get:Kuser.RegisterResponse.success)
  return _internal_success();
}
inline void RegisterResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RegisterResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Kuser.RegisterResponse.success)
}

// -------------------------------------------------------------------

// SumToNRequest

// int32 n = 1;
inline void SumToNRequest::clear_n() {
  n_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SumToNRequest::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SumToNRequest::n() const {
  // @@protoc_insertion_point(field_get:Kuser.SumToNRequest.n)
  return _internal_n();
}
inline void SumToNRequest::_internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_ = value;
}
inline void SumToNRequest::set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:Kuser.SumToNRequest.n)
}

// -------------------------------------------------------------------

// SumToNResponse

// .Kuser.ResultCode result = 1;
inline bool SumToNResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool SumToNResponse::has_result() const {
  return _internal_has_result();
}
inline void SumToNResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Kuser::ResultCode& SumToNResponse::_internal_result() const {
  const ::Kuser::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kuser::ResultCode*>(
      &::Kuser::_ResultCode_default_instance_);
}
inline const ::Kuser::ResultCode& SumToNResponse::result() const {
  // @@protoc_insertion_point(field_get:Kuser.SumToNResponse.result)
  return _internal_result();
}
inline void SumToNResponse::unsafe_arena_set_allocated_result(
    ::Kuser::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.SumToNResponse.result)
}
inline ::Kuser::ResultCode* SumToNResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kuser::ResultCode* SumToNResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Kuser.SumToNResponse.result)
  
  ::Kuser::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Kuser::ResultCode* SumToNResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kuser::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::Kuser::ResultCode* SumToNResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Kuser.SumToNResponse.result)
  return _internal_mutable_result();
}
inline void SumToNResponse::set_allocated_result(::Kuser::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Kuser.SumToNResponse.result)
}

// int32 sum = 2;
inline void SumToNResponse::clear_sum() {
  sum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SumToNResponse::_internal_sum() const {
  return sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SumToNResponse::sum() const {
  // @@protoc_insertion_point(field_get:Kuser.SumToNResponse.sum)
  return _internal_sum();
}
inline void SumToNResponse::_internal_set_sum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sum_ = value;
}
inline void SumToNResponse::set_sum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:Kuser.SumToNResponse.sum)
}

// -------------------------------------------------------------------

// GetUserProfileRequest

// uint32 user_id = 1;
inline void GetUserProfileRequest::clear_user_id() {
  user_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetUserProfileRequest::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetUserProfileRequest::user_id() const {
  // @@protoc_insertion_point(field_get:Kuser.GetUserProfileRequest.user_id)
  return _internal_user_id();
}
inline void GetUserProfileRequest::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_id_ = value;
}
inline void GetUserProfileRequest::set_user_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Kuser.GetUserProfileRequest.user_id)
}

// -------------------------------------------------------------------

// GetUserProfileResponse

// .Kuser.ResultCode result = 1;
inline bool GetUserProfileResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool GetUserProfileResponse::has_result() const {
  return _internal_has_result();
}
inline void GetUserProfileResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Kuser::ResultCode& GetUserProfileResponse::_internal_result() const {
  const ::Kuser::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kuser::ResultCode*>(
      &::Kuser::_ResultCode_default_instance_);
}
inline const ::Kuser::ResultCode& GetUserProfileResponse::result() const {
  // @@protoc_insertion_point(field_get:Kuser.GetUserProfileResponse.result)
  return _internal_result();
}
inline void GetUserProfileResponse::unsafe_arena_set_allocated_result(
    ::Kuser::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.GetUserProfileResponse.result)
}
inline ::Kuser::ResultCode* GetUserProfileResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kuser::ResultCode* GetUserProfileResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Kuser.GetUserProfileResponse.result)
  
  ::Kuser::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Kuser::ResultCode* GetUserProfileResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kuser::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::Kuser::ResultCode* GetUserProfileResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Kuser.GetUserProfileResponse.result)
  return _internal_mutable_result();
}
inline void GetUserProfileResponse::set_allocated_result(::Kuser::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Kuser.GetUserProfileResponse.result)
}

// bytes profile_data = 2;
inline void GetUserProfileResponse::clear_profile_data() {
  profile_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetUserProfileResponse::profile_data() const {
  // @@protoc_insertion_point(field_get:Kuser.GetUserProfileResponse.profile_data)
  return _internal_profile_data();
}
inline void GetUserProfileResponse::set_profile_data(const std::string& value) {
  _internal_set_profile_data(value);
  // @@protoc_insertion_point(field_set:Kuser.GetUserProfileResponse.profile_data)
}
inline std::string* GetUserProfileResponse::mutable_profile_data() {
  // @@protoc_insertion_point(field_mutable:Kuser.GetUserProfileResponse.profile_data)
  return _internal_mutable_profile_data();
}
inline const std::string& GetUserProfileResponse::_internal_profile_data() const {
  return profile_data_.Get();
}
inline void GetUserProfileResponse::_internal_set_profile_data(const std::string& value) {
  
  profile_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetUserProfileResponse::set_profile_data(std::string&& value) {
  
  profile_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.GetUserProfileResponse.profile_data)
}
inline void GetUserProfileResponse::set_profile_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  profile_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.GetUserProfileResponse.profile_data)
}
inline void GetUserProfileResponse::set_profile_data(const void* value,
    size_t size) {
  
  profile_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.GetUserProfileResponse.profile_data)
}
inline std::string* GetUserProfileResponse::_internal_mutable_profile_data() {
  
  return profile_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetUserProfileResponse::release_profile_data() {
  // @@protoc_insertion_point(field_release:Kuser.GetUserProfileResponse.profile_data)
  return profile_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetUserProfileResponse::set_allocated_profile_data(std::string* profile_data) {
  if (profile_data != nullptr) {
    
  } else {
    
  }
  profile_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profile_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.GetUserProfileResponse.profile_data)
}
inline std::string* GetUserProfileResponse::unsafe_arena_release_profile_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.GetUserProfileResponse.profile_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return profile_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetUserProfileResponse::unsafe_arena_set_allocated_profile_data(
    std::string* profile_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (profile_data != nullptr) {
    
  } else {
    
  }
  profile_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      profile_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.GetUserProfileResponse.profile_data)
}

// bool from_cache = 3;
inline void GetUserProfileResponse::clear_from_cache() {
  from_cache_ = false;
}
inline bool GetUserProfileResponse::_internal_from_cache() const {
  return from_cache_;
}
inline bool GetUserProfileResponse::from_cache() const {
  // @@protoc_insertion_point(field_get:Kuser.GetUserProfileResponse.from_cache)
  return _internal_from_cache();
}
inline void GetUserProfileResponse::_internal_set_from_cache(bool value) {
  
  from_cache_ = value;
}
inline void GetUserProfileResponse::set_from_cache(bool value) {
  _internal_set_from_cache(value);
  // @@protoc_insertion_point(field_set:Kuser.GetUserProfileResponse.from_cache)
}

// -------------------------------------------------------------------

// CacheSetRequest

// bytes key = 1;
inline void CacheSetRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheSetRequest::key() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheSetRequest.key)
  return _internal_key();
}
inline void CacheSetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheSetRequest.key)
}
inline std::string* CacheSetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheSetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& CacheSetRequest::_internal_key() const {
  return key_.Get();
}
inline void CacheSetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheSetRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.CacheSetRequest.key)
}
inline void CacheSetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.CacheSetRequest.key)
}
inline void CacheSetRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheSetRequest.key)
}
inline std::string* CacheSetRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheSetRequest::release_key() {
  // @@protoc_insertion_point(field_release:Kuser.CacheSetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheSetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheSetRequest.key)
}
inline std::string* CacheSetRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.CacheSetRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheSetRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheSetRequest.key)
}

// bytes value = 2;
inline void CacheSetRequest::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheSetRequest::value() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheSetRequest.value)
  return _internal_value();
}
inline void CacheSetRequest::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheSetRequest.value)
}
inline std::string* CacheSetRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheSetRequest.value)
  return _internal_mutable_value();
}
inline const std::string& CacheSetRequest::_internal_value() const {
  return value_.Get();
}
inline void CacheSetRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheSetRequest::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.CacheSetRequest.value)
}
inline void CacheSetRequest::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.CacheSetRequest.value)
}
inline void CacheSetRequest::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheSetRequest.value)
}
inline std::string* CacheSetRequest::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheSetRequest::release_value() {
  // @@protoc_insertion_point(field_release:Kuser.CacheSetRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheSetRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheSetRequest.value)
}
inline std::string* CacheSetRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.CacheSetRequest.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheSetRequest::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheSetRequest.value)
}

// int32 expire_seconds = 3;
inline void CacheSetRequest::clear_expire_seconds() {
  expire_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheSetRequest::_internal_expire_seconds() const {
  return expire_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CacheSetRequest::expire_seconds() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheSetRequest.expire_seconds)
  return _internal_expire_seconds();
}
inline void CacheSetRequest::_internal_set_expire_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expire_seconds_ = value;
}
inline void CacheSetRequest::set_expire_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expire_seconds(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheSetRequest.expire_seconds)
}

// -------------------------------------------------------------------

// CacheGetRequest

// bytes key = 1;
inline void CacheGetRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheGetRequest::key() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheGetRequest.key)
  return _internal_key();
}
inline void CacheGetRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheGetRequest.key)
}
inline std::string* CacheGetRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheGetRequest.key)
  return _internal_mutable_key();
}
inline const std::string& CacheGetRequest::_internal_key() const {
  return key_.Get();
}
inline void CacheGetRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheGetRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.CacheGetRequest.key)
}
inline void CacheGetRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.CacheGetRequest.key)
}
inline void CacheGetRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheGetRequest.key)
}
inline std::string* CacheGetRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheGetRequest::release_key() {
  // @@protoc_insertion_point(field_release:Kuser.CacheGetRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheGetRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheGetRequest.key)
}
inline std::string* CacheGetRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.CacheGetRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheGetRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheGetRequest.key)
}

// -------------------------------------------------------------------

// CacheGetResponse

// .Kuser.ResultCode result = 1;
inline bool CacheGetResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CacheGetResponse::has_result() const {
  return _internal_has_result();
}
inline void CacheGetResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Kuser::ResultCode& CacheGetResponse::_internal_result() const {
  const ::Kuser::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kuser::ResultCode*>(
      &::Kuser::_ResultCode_default_instance_);
}
inline const ::Kuser::ResultCode& CacheGetResponse::result() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheGetResponse.result)
  return _internal_result();
}
inline void CacheGetResponse::unsafe_arena_set_allocated_result(
    ::Kuser::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheGetResponse.result)
}
inline ::Kuser::ResultCode* CacheGetResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kuser::ResultCode* CacheGetResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Kuser.CacheGetResponse.result)
  
  ::Kuser::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Kuser::ResultCode* CacheGetResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kuser::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::Kuser::ResultCode* CacheGetResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheGetResponse.result)
  return _internal_mutable_result();
}
inline void CacheGetResponse::set_allocated_result(::Kuser::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheGetResponse.result)
}

// bytes value = 2;
inline void CacheGetResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheGetResponse::value() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheGetResponse.value)
  return _internal_value();
}
inline void CacheGetResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheGetResponse.value)
}
inline std::string* CacheGetResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheGetResponse.value)
  return _internal_mutable_value();
}
inline const std::string& CacheGetResponse::_internal_value() const {
  return value_.Get();
}
inline void CacheGetResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheGetResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.CacheGetResponse.value)
}
inline void CacheGetResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.CacheGetResponse.value)
}
inline void CacheGetResponse::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheGetResponse.value)
}
inline std::string* CacheGetResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheGetResponse::release_value() {
  // @@protoc_insertion_point(field_release:Kuser.CacheGetResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheGetResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheGetResponse.value)
}
inline std::string* CacheGetResponse::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.CacheGetResponse.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheGetResponse::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheGetResponse.value)
}

// bool exists = 3;
inline void CacheGetResponse::clear_exists() {
  exists_ = false;
}
inline bool CacheGetResponse::_internal_exists() const {
  return exists_;
}
inline bool CacheGetResponse::exists() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheGetResponse.exists)
  return _internal_exists();
}
inline void CacheGetResponse::_internal_set_exists(bool value) {
  
  exists_ = value;
}
inline void CacheGetResponse::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheGetResponse.exists)
}

// int64 expire_time = 4;
inline void CacheGetResponse::clear_expire_time() {
  expire_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheGetResponse::_internal_expire_time() const {
  return expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheGetResponse::expire_time() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheGetResponse.expire_time)
  return _internal_expire_time();
}
inline void CacheGetResponse::_internal_set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expire_time_ = value;
}
inline void CacheGetResponse::set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expire_time(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheGetResponse.expire_time)
}

// -------------------------------------------------------------------

// CacheDeleteRequest

// bytes key = 1;
inline void CacheDeleteRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheDeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheDeleteRequest.key)
  return _internal_key();
}
inline void CacheDeleteRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheDeleteRequest.key)
}
inline std::string* CacheDeleteRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheDeleteRequest.key)
  return _internal_mutable_key();
}
inline const std::string& CacheDeleteRequest::_internal_key() const {
  return key_.Get();
}
inline void CacheDeleteRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheDeleteRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.CacheDeleteRequest.key)
}
inline void CacheDeleteRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.CacheDeleteRequest.key)
}
inline void CacheDeleteRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheDeleteRequest.key)
}
inline std::string* CacheDeleteRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheDeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:Kuser.CacheDeleteRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheDeleteRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheDeleteRequest.key)
}
inline std::string* CacheDeleteRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.CacheDeleteRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheDeleteRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheDeleteRequest.key)
}

// -------------------------------------------------------------------

// CacheBatchGetRequest

// repeated bytes keys = 1;
inline int CacheBatchGetRequest::_internal_keys_size() const {
  return keys_.size();
}
inline int CacheBatchGetRequest::keys_size() const {
  return _internal_keys_size();
}
inline void CacheBatchGetRequest::clear_keys() {
  keys_.Clear();
}
inline std::string* CacheBatchGetRequest::add_keys() {
  // @@protoc_insertion_point(field_add_mutable:Kuser.CacheBatchGetRequest.keys)
  return _internal_add_keys();
}
inline const std::string& CacheBatchGetRequest::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const std::string& CacheBatchGetRequest::keys(int index) const {
  // @@protoc_insertion_point(field_get:Kuser.CacheBatchGetRequest.keys)
  return _internal_keys(index);
}
inline std::string* CacheBatchGetRequest::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheBatchGetRequest.keys)
  return keys_.Mutable(index);
}
inline void CacheBatchGetRequest::set_keys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Kuser.CacheBatchGetRequest.keys)
  keys_.Mutable(index)->assign(value);
}
inline void CacheBatchGetRequest::set_keys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Kuser.CacheBatchGetRequest.keys)
  keys_.Mutable(index)->assign(std::move(value));
}
inline void CacheBatchGetRequest::set_keys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Kuser.CacheBatchGetRequest.keys)
}
inline void CacheBatchGetRequest::set_keys(int index, const void* value, size_t size) {
  keys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheBatchGetRequest.keys)
}
inline std::string* CacheBatchGetRequest::_internal_add_keys() {
  return keys_.Add();
}
inline void CacheBatchGetRequest::add_keys(const std::string& value) {
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Kuser.CacheBatchGetRequest.keys)
}
inline void CacheBatchGetRequest::add_keys(std::string&& value) {
  keys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Kuser.CacheBatchGetRequest.keys)
}
inline void CacheBatchGetRequest::add_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  keys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Kuser.CacheBatchGetRequest.keys)
}
inline void CacheBatchGetRequest::add_keys(const void* value, size_t size) {
  keys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Kuser.CacheBatchGetRequest.keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CacheBatchGetRequest::keys() const {
  // @@protoc_insertion_point(field_list:Kuser.CacheBatchGetRequest.keys)
  return keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CacheBatchGetRequest::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:Kuser.CacheBatchGetRequest.keys)
  return &keys_;
}

// -------------------------------------------------------------------

// CacheItem

// bytes key = 1;
inline void CacheItem::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheItem::key() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheItem.key)
  return _internal_key();
}
inline void CacheItem::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheItem.key)
}
inline std::string* CacheItem::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheItem.key)
  return _internal_mutable_key();
}
inline const std::string& CacheItem::_internal_key() const {
  return key_.Get();
}
inline void CacheItem::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheItem::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.CacheItem.key)
}
inline void CacheItem::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.CacheItem.key)
}
inline void CacheItem::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheItem.key)
}
inline std::string* CacheItem::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheItem::release_key() {
  // @@protoc_insertion_point(field_release:Kuser.CacheItem.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheItem::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheItem.key)
}
inline std::string* CacheItem::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.CacheItem.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheItem::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheItem.key)
}

// bytes value = 2;
inline void CacheItem::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheItem::value() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheItem.value)
  return _internal_value();
}
inline void CacheItem::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheItem.value)
}
inline std::string* CacheItem::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheItem.value)
  return _internal_mutable_value();
}
inline const std::string& CacheItem::_internal_value() const {
  return value_.Get();
}
inline void CacheItem::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheItem::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.CacheItem.value)
}
inline void CacheItem::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.CacheItem.value)
}
inline void CacheItem::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheItem.value)
}
inline std::string* CacheItem::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheItem::release_value() {
  // @@protoc_insertion_point(field_release:Kuser.CacheItem.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheItem::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheItem.value)
}
inline std::string* CacheItem::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.CacheItem.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheItem::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheItem.value)
}

// bool exists = 3;
inline void CacheItem::clear_exists() {
  exists_ = false;
}
inline bool CacheItem::_internal_exists() const {
  return exists_;
}
inline bool CacheItem::exists() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheItem.exists)
  return _internal_exists();
}
inline void CacheItem::_internal_set_exists(bool value) {
  
  exists_ = value;
}
inline void CacheItem::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheItem.exists)
}

// -------------------------------------------------------------------

// CacheBatchGetResponse

// .Kuser.ResultCode result = 1;
inline bool CacheBatchGetResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CacheBatchGetResponse::has_result() const {
  return _internal_has_result();
}
inline void CacheBatchGetResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Kuser::ResultCode& CacheBatchGetResponse::_internal_result() const {
  const ::Kuser::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kuser::ResultCode*>(
      &::Kuser::_ResultCode_default_instance_);
}
inline const ::Kuser::ResultCode& CacheBatchGetResponse::result() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheBatchGetResponse.result)
  return _internal_result();
}
inline void CacheBatchGetResponse::unsafe_arena_set_allocated_result(
    ::Kuser::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheBatchGetResponse.result)
}
inline ::Kuser::ResultCode* CacheBatchGetResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kuser::ResultCode* CacheBatchGetResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Kuser.CacheBatchGetResponse.result)
  
  ::Kuser::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Kuser::ResultCode* CacheBatchGetResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kuser::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::Kuser::ResultCode* CacheBatchGetResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheBatchGetResponse.result)
  return _internal_mutable_result();
}
inline void CacheBatchGetResponse::set_allocated_result(::Kuser::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheBatchGetResponse.result)
}

// repeated .Kuser.CacheItem items = 2;
inline int CacheBatchGetResponse::_internal_items_size() const {
  return items_.size();
}
inline int CacheBatchGetResponse::items_size() const {
  return _internal_items_size();
}
inline void CacheBatchGetResponse::clear_items() {
  items_.Clear();
}
inline ::Kuser::CacheItem* CacheBatchGetResponse::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheBatchGetResponse.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Kuser::CacheItem >*
CacheBatchGetResponse::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Kuser.CacheBatchGetResponse.items)
  return &items_;
}
inline const ::Kuser::CacheItem& CacheBatchGetResponse::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Kuser::CacheItem& CacheBatchGetResponse::items(int index) const {
  // @@protoc_insertion_point(field_get:Kuser.CacheBatchGetResponse.items)
  return _internal_items(index);
}
inline ::Kuser::CacheItem* CacheBatchGetResponse::_internal_add_items() {
  return items_.Add();
}
inline ::Kuser::CacheItem* CacheBatchGetResponse::add_items() {
  // @@protoc_insertion_point(field_add:Kuser.CacheBatchGetResponse.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Kuser::CacheItem >&
CacheBatchGetResponse::items() const {
  // @@protoc_insertion_point(field_list:Kuser.CacheBatchGetResponse.items)
  return items_;
}

// -------------------------------------------------------------------

// CacheExistsRequest

// bytes key = 1;
inline void CacheExistsRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CacheExistsRequest::key() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheExistsRequest.key)
  return _internal_key();
}
inline void CacheExistsRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheExistsRequest.key)
}
inline std::string* CacheExistsRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheExistsRequest.key)
  return _internal_mutable_key();
}
inline const std::string& CacheExistsRequest::_internal_key() const {
  return key_.Get();
}
inline void CacheExistsRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CacheExistsRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Kuser.CacheExistsRequest.key)
}
inline void CacheExistsRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Kuser.CacheExistsRequest.key)
}
inline void CacheExistsRequest::set_key(const void* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Kuser.CacheExistsRequest.key)
}
inline std::string* CacheExistsRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CacheExistsRequest::release_key() {
  // @@protoc_insertion_point(field_release:Kuser.CacheExistsRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CacheExistsRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheExistsRequest.key)
}
inline std::string* CacheExistsRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Kuser.CacheExistsRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CacheExistsRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheExistsRequest.key)
}

// -------------------------------------------------------------------

// CacheExistsResponse

// .Kuser.ResultCode result = 1;
inline bool CacheExistsResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CacheExistsResponse::has_result() const {
  return _internal_has_result();
}
inline void CacheExistsResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Kuser::ResultCode& CacheExistsResponse::_internal_result() const {
  const ::Kuser::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kuser::ResultCode*>(
      &::Kuser::_ResultCode_default_instance_);
}
inline const ::Kuser::ResultCode& CacheExistsResponse::result() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheExistsResponse.result)
  return _internal_result();
}
inline void CacheExistsResponse::unsafe_arena_set_allocated_result(
    ::Kuser::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheExistsResponse.result)
}
inline ::Kuser::ResultCode* CacheExistsResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kuser::ResultCode* CacheExistsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Kuser.CacheExistsResponse.result)
  
  ::Kuser::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Kuser::ResultCode* CacheExistsResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kuser::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::Kuser::ResultCode* CacheExistsResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheExistsResponse.result)
  return _internal_mutable_result();
}
inline void CacheExistsResponse::set_allocated_result(::Kuser::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheExistsResponse.result)
}

// bool exists = 2;
inline void CacheExistsResponse::clear_exists() {
  exists_ = false;
}
inline bool CacheExistsResponse::_internal_exists() const {
  return exists_;
}
inline bool CacheExistsResponse::exists() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheExistsResponse.exists)
  return _internal_exists();
}
inline void CacheExistsResponse::_internal_set_exists(bool value) {
  
  exists_ = value;
}
inline void CacheExistsResponse::set_exists(bool value) {
  _internal_set_exists(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheExistsResponse.exists)
}

// -------------------------------------------------------------------

// CacheStatsRequest

// -------------------------------------------------------------------

// CacheStatsResponse

// .Kuser.ResultCode result = 1;
inline bool CacheStatsResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool CacheStatsResponse::has_result() const {
  return _internal_has_result();
}
inline void CacheStatsResponse::clear_result() {
  if (GetArena() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::Kuser::ResultCode& CacheStatsResponse::_internal_result() const {
  const ::Kuser::ResultCode* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Kuser::ResultCode*>(
      &::Kuser::_ResultCode_default_instance_);
}
inline const ::Kuser::ResultCode& CacheStatsResponse::result() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheStatsResponse.result)
  return _internal_result();
}
inline void CacheStatsResponse::unsafe_arena_set_allocated_result(
    ::Kuser::ResultCode* result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Kuser.CacheStatsResponse.result)
}
inline ::Kuser::ResultCode* CacheStatsResponse::release_result() {
  auto temp = unsafe_arena_release_result();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Kuser::ResultCode* CacheStatsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:Kuser.CacheStatsResponse.result)
  
  ::Kuser::ResultCode* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::Kuser::ResultCode* CacheStatsResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::Kuser::ResultCode>(GetArena());
    result_ = p;
  }
  return result_;
}
inline ::Kuser::ResultCode* CacheStatsResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:Kuser.CacheStatsResponse.result)
  return _internal_mutable_result();
}
inline void CacheStatsResponse::set_allocated_result(::Kuser::ResultCode* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:Kuser.CacheStatsResponse.result)
}

// int64 total_keys = 2;
inline void CacheStatsResponse::clear_total_keys() {
  total_keys_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheStatsResponse::_internal_total_keys() const {
  return total_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheStatsResponse::total_keys() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheStatsResponse.total_keys)
  return _internal_total_keys();
}
inline void CacheStatsResponse::_internal_set_total_keys(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_keys_ = value;
}
inline void CacheStatsResponse::set_total_keys(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_keys(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheStatsResponse.total_keys)
}

// int64 memory_usage = 3;
inline void CacheStatsResponse::clear_memory_usage() {
  memory_usage_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheStatsResponse::_internal_memory_usage() const {
  return memory_usage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheStatsResponse::memory_usage() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheStatsResponse.memory_usage)
  return _internal_memory_usage();
}
inline void CacheStatsResponse::_internal_set_memory_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  memory_usage_ = value;
}
inline void CacheStatsResponse::set_memory_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_memory_usage(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheStatsResponse.memory_usage)
}

// int64 hit_count = 4;
inline void CacheStatsResponse::clear_hit_count() {
  hit_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheStatsResponse::_internal_hit_count() const {
  return hit_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheStatsResponse::hit_count() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheStatsResponse.hit_count)
  return _internal_hit_count();
}
inline void CacheStatsResponse::_internal_set_hit_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  hit_count_ = value;
}
inline void CacheStatsResponse::set_hit_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hit_count(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheStatsResponse.hit_count)
}

// int64 miss_count = 5;
inline void CacheStatsResponse::clear_miss_count() {
  miss_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheStatsResponse::_internal_miss_count() const {
  return miss_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CacheStatsResponse::miss_count() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheStatsResponse.miss_count)
  return _internal_miss_count();
}
inline void CacheStatsResponse::_internal_set_miss_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  miss_count_ = value;
}
inline void CacheStatsResponse::set_miss_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_miss_count(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheStatsResponse.miss_count)
}

// double hit_rate = 6;
inline void CacheStatsResponse::clear_hit_rate() {
  hit_rate_ = 0;
}
inline double CacheStatsResponse::_internal_hit_rate() const {
  return hit_rate_;
}
inline double CacheStatsResponse::hit_rate() const {
  // @@protoc_insertion_point(field_get:Kuser.CacheStatsResponse.hit_rate)
  return _internal_hit_rate();
}
inline void CacheStatsResponse::_internal_set_hit_rate(double value) {
  
  hit_rate_ = value;
}
inline void CacheStatsResponse::set_hit_rate(double value) {
  _internal_set_hit_rate(value);
  // @@protoc_insertion_point(field_set:Kuser.CacheStatsResponse.hit_rate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Kuser

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
